.#  ===========================================================================
.#  Generate automake files for project
.#
.#  This is a code generator built using the iMatix GSL code generation
.#  language. See https://github.com/imatix/gsl for details. This script
.#  is licensed under MIT/X11.
.#
.#  This script will generate the following files:
.#      * Makefile.am
.#      * src/Makemodule.am
.#  ===========================================================================
.echo "Generating Makefile.am..."
.output "Makefile.am"
#############################################################################
#   THIS FILE IS GENERATED BY ZPROJECT, DO NOT EDIT EXCEPT EXPERIMENTALLY   #
#   Please read the README.txt file if you like to do permanent changes.    #
#############################################################################

ACLOCAL_AMFLAGS = -I config

AM_CPPFLAGS = \\
.for package_dependency where defined (package_dependency.for_all)
    \${$(package_dependency.name)_CFLAGS} \\
.endfor
    -I\$(srcdir)/include

SUBDIRS =
.if count (class) > 0
SUBDIRS += doc
.endif

DIST_SUBDIRS =

lib_LTLIBRARIES =

bin_PROGRAMS =

check_PROGRAMS =

EXTRA_DIST = \\
.for project.extra
    $(extra.name) \\
.endfor
    version.sh

include \$(srcdir)/src/Makemodule.am

#############################################################################
#   THIS FILE IS GENERATED BY ZPROJECT, DO NOT EDIT EXCEPT EXPERIMENTALLY   #
#   Please read the README.txt file if you like to do permanent changes.    #
#############################################################################
.echo "Generating src/Makemodule.am..."
.if !file.exists ("src")
.   directory.create("src")
.endif    
.output "src/Makemodule.am"
#############################################################################
#   THIS FILE IS GENERATED BY ZPROJECT, DO NOT EDIT EXCEPT EXPERIMENTALLY   #
#   Please read the README.txt file if you like to do permanent changes.    #
#############################################################################
.if (count (class) > 0)
lib_LTLIBRARIES += src/lib$(project.name).la

pkgconfig_DATA = src/lib$(project.name).pc

include_HEADERS = \\
.if count (class, class.name = project.name) = 0
    include/$(project.name).h \\
.endif
.for header
    include/$(name).h \\
.endfor
.for class where !defined (class.private)
.   class.classdir = "include"
    $(classdir)/$(name).h \\
.endfor
    include/$(project.name)_library.h

src_lib$(project.name)_la_SOURCES = \\
.for class
    src/$(name).c \\
.endfor
.for main
    src/$(name).c \\
.endfor
.for extra
    src/$(name) \\
.endfor
    src/platform.h

src_lib$(project.name)_la_CPPFLAGS = \\
.for package_dependency where defined (package_dependency.for_lib)
    \${$(package_dependency.name)_CFLAGS} \\
.endfor
    ${AM_CPPFLAGS}

src_lib$(project.name)_la_LDFLAGS = \\
    -version-info @LTVER@ \\
    \$(LIBTOOL_EXTRA_LDFLAGS)

if ON_MINGW
src_lib$(project.name)_la_LDFLAGS += \\
    -no-undefined \\
    -avoid-version
endif

.for project.main
bin_PROGRAMS += src/$(main.name)
.endfor

check_PROGRAMS += src/$(project.name)_selftest

src_$(project.name)_selftest_CPPFLAGS = \\
.for package_dependency where defined (package_dependency.for_test)
    \${$(package_dependency.name)_CFLAGS} \\
.endfor
    \${src_lib$(project.name)_la_CFLAGS}

src_$(project.name)_selftest_LDADD = \\
.if count (package_dependency, defined (count.for_lib) | defined (count.for_test) | defined (count.for_all)) > 0
    src/lib$(project.name).la \\
.else
    src/lib$(project.name).la
.endif
.for package_dependency where defined (package_dependency.for_lib) | defined (package_dependency.for_test) | defined (package_dependency.for_all)
.   if last()
    \${$(package_dependency.name)_LIBS}
.   else
    \${$(package_dependency.name)_LIBS} \\
.endif
.endfor

src_$(project.name)_selftest_SOURCES = src/$(project.name)_selftest.c

.for project.main
src_$(name)_SOURCES = src/$(name).c
src_$(name)_LDADD = \\
.if count (package_dependency, defined (count.for_lib) | defined (count.for_test) | defined (count.for_all)) > 0
    src/lib$(project.name).la \\
.else
    src/lib$(project.name).la
.endif
.for package_dependency where defined (package_dependency.for_lib) | defined (package_dependency.for_test) | defined (package_dependency.for_all)
.   if last()
    \${$(package_dependency.name)_LIBS}
.   else
    \${$(package_dependency.name)_LIBS} \\
.endif
.endfor

.endfor
TESTS = src/$(project.name)_selftest
.else
noinst_LTLIBRARIES = 
noinst_PROGRAMS = 
TESTS = 
.endif

.for bin
.   if first() 
# Install data into /usr/local/bin
$(project.name)dir = @bindir@
$(project.name)_SCRIPTS = \\
.   endif    
.   if !last()
    $(bin.name) \\
.   else
    $(bin.name)
.   endif    
.endfor

.if (count (class) > 0)
# define custom target for all products of /src
src: src/lib$(project.name).la src/$(project.name)_selftest
.endif

.for model
.   if first ()
# Produce generated models; do this manually in src directory
code:
.   endif
\tcd $\(srcdir)/src; gsl -q $(name).xml
.endfor
#############################################################################
#   THIS FILE IS GENERATED BY ZPROJECT, DO NOT EDIT EXCEPT EXPERIMENTALLY   #
#   Please read the README.txt file if you like to do permanent changes.    #
#############################################################################
