#  Generate documentation make files for project
#
#  This is a code generator built using the iMatix GSL code generation
#  language. See https://github.com/imatix/gsl for details. This script
#  is licensed under MIT/X11.

target_register ("docs", "man pages")

.macro generate_mkman
.output "doc/mkman"
#! /usr/bin/perl
#
#   mkman - Generates man pages from C source and header files.
#
#   Syntax: './mkman classname', in doc subdirectory.
#
#   Copyright (c) 1996-2016 iMatix Corporation
#
#   This is free software; you can redistribute it and/or modify it under the
#   terms of the GNU General Public License as published by the Free Software
#   Foundation; either version 3 of the License, or (at your option) any later
#   version.
#
#   This software is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABIL-
#   ITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
#   License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program. If not, see <http://www.gnu.org/licenses/>.
#
use File::Basename;

sub pull {
    local ($_) = @_;
    if (/^(.*)(@[a-zA-Z0-9]+)(,(\\w*)\\s*)?/) {
        $file = $1;
        $tag = $2;
        $opts = $4;
        $text = "";
        die "Can't read $file: $!"
            unless open (SOURCE, $file);
        while (<SOURCE>) {
            if (/$tag/) {
                while (<SOURCE>) {
                    last if /\\@discuss/ || /\\@end/;
                    $_ = "    $_" if $opts eq "code";
                    s/^    // if $opts eq "left";
                    $_ = "    $_" if $opts eq "test";
                    s/^        /    / if $opts eq "test";
                    $text .= $_;
                }
            }
        }
        close (SOURCE);
        $text = "Please add $tag section in $file.\\n" unless $text;
        return $text;
    }
    else {
        print "E: bad pull request: $_\\n";
    }
}

sub generate_manpage {
    local ($name) = @_;
    $name = $1 if $name =~ /(\\w+)\\.\\w+/;

    #   Check if we're making the man page for a main program, or a class

    $cat = 0;           #   Unknown category
    exit unless open (MAKEFILE, "Makefile");
    while (<MAKEFILE>) {
        if (/MAN1.*$name\\.1/) {
            $source = "../src/$name.c";
            $header = "../src/$name.c";
            $cat = 1;
            last;
        }
        elsif (/MAN3.*$name\\.3/) {
            $source = "../src/$name.c";
            $header = "../include/$name.h";
            $cat = 3;
            last;
        }
    }
    close MAKEFILE;

    #   Look for class title in 2nd line of source
    #   If there's no class file, leave hand-written man page alone
    exit unless open (SOURCE, $source);
    $_ = <SOURCE>;
    $_ = <SOURCE>;
    $title = "no title found";
    $title = $1 if (/    \\w+ - (.*)/);
    close (SOURCE);

    #   Open output file
    die "Can't create $name.txt: $!"
        unless open (OUTPUT, ">$name.txt");

    printf "Generating $name.txt...\\n";
    $underline = "=" x (length ($name) + 3);

    $template = <<"END";
$name($cat)
$underline

NAME
----
$name - $title

SYNOPSIS
--------
----
pull $header\\@interface
----

DESCRIPTION
-----------

pull $source\\@header,left

pull $source\\@discuss,left

EXAMPLE
-------
\.From $name\\_test method
----
pull $source\\@selftest,left
----
END

    #   Now process template
    for (split /^/, $template) {
        if (/^pull (.*)$/) {
            print OUTPUT pull ($1);
        }
        else {
            print OUTPUT $_;
        }
    }

    #   Generate a simple text documentation for README.txt
    close OUTPUT;
    printf "Generating $name.doc...\\n";
    die "Can't create $name.doc: $!"
        unless open (OUTPUT, ">$name.doc");
    print OUTPUT "#### $name - $title\\n\\n";
    print OUTPUT pull ("$source\\@header,left");
    print OUTPUT "\\n";
    print OUTPUT pull ("$source\\@discuss,left");
    print OUTPUT "\\nThis is the class interface:\\n\\n";
    print OUTPUT pull ("$header\\@interface,code");
    print OUTPUT "\\nThis is the class self test code:\\n\\n";
    print OUTPUT pull ("$source\\@selftest,test");
    print OUTPUT "\\n";
    close OUTPUT;
}

$name = shift (@ARGV);
while ($name) {
    generate_manpage ($name);
    $name = shift (@ARGV);
}
.close
.chmod_x ("doc/mkman")
.endmacro

.macro generate_man_pages
.directory.create ("doc")
.output "doc/Makefile.am"
$(project.GENERATED_WARNING_HEADER:)
.project.manpage = "$(project.name:c).7"
.man3 = ""
.for project.class where scope = "public"
.   man3 += " $(name:c).3"
.   if class.name = project.name
.       project.manpage = ""
.   endif
.endfor
.man1 = ""
.for project.main where scope = "public"
.   man1 += " $(name:c).1"
.   if "$(main.name)" = "$(project.name)"
.       project.manpage = ""
.   endif
.endfor
MAN1 =$(man1)
MAN3 =$(man3)
MAN7 = $(project.manpage)
MAN_DOC = $\(MAN1) $\(MAN3) $\(MAN7)

MAN_TXT = $\(MAN1:%.1=%.txt)
MAN_TXT += $\(MAN3:%.3=%.txt)
MAN_TXT += $\(MAN7:%.7=%.txt)

EXTRA_DIST = asciidoc.conf $\(MAN_TXT)

if INSTALL_MAN
dist_man_MANS = $\(MAN_DOC)
endif

if BUILD_DOC
MAINTAINERCLEANFILES = $\(MAN_DOC)

dist-hook : $\(MAN_DOC)

SUFFIXES=.txt .xml .1 .3 .7

\.txt.xml:
\tasciidoc -d manpage -b docbook -f $\(srcdir)/asciidoc.conf \\
        -a$(project.name:c)_version=@PACKAGE_VERSION@ -o$@ $<
\.xml.1:
\txmlto man $<
\.xml.3:
\txmlto man $<
\.xml.7:
\txmlto man $<

.for project.class where scope = "public"
$(name:c).txt:
\t./mkman $@
.endfor
.for project.main where scope = "public"
$(name:c).txt:
\t./mkman $@
.endfor
clean:
\trm -f *.1 *.3
\t./mkman \
.for project.class where scope = "public"
$(name:c) \
.endfor
.for project.main where scope = "public"
$(name:c) \
.endfor

endif
$(project.GENERATED_WARNING_HEADER:)
.output "doc/asciidoc.conf"
$(project.GENERATED_WARNING_HEADER:)
[paradef-default]
literal-style=template="literalparagraph"

[macros]
(?su)[\\\\]?(?P<name>link$(project.name:c)):(?P<target>\\S*?)\\[(?P<attrlist>.*?)\\]=

ifdef::backend-docbook[]
[link$(project.name:c)-inlinemacro]
{0%{target}}
{0#<citerefentry>}
{0#<refentrytitle>{target}</refentrytitle><manvolnum>{0}</manvolnum>}
{0#</citerefentry>}
endif::backend-docbook[]

ifdef::backend-xhtml11[]
[link$(project.name:c)-inlinemacro]
<a href="{target}.html">{target}{0?({0})}</a>
endif::backend-xhtml11[]

ifdef::doctype-manpage[]
ifdef::backend-docbook[]
[header]
template::[header-declarations]
<refentry>
<refmeta>
<refentrytitle>{mantitle}</refentrytitle>
<manvolnum>{manvolnum}</manvolnum>
<refmiscinfo class="source">$(project.name:Pascal)</refmiscinfo>
<refmiscinfo class="version">{$(project.name:c)_version}</refmiscinfo>
<refmiscinfo class="manual">$(project.name:Pascal) Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>{manname}</refname>
  <refpurpose>{manpurpose}</refpurpose>
</refnamediv>
[footer]
<refsect1 id="_authors">
<title>AUTHORS</title>
<simpara>The $(project.name) manual was written by the authors in the AUTHORS file.</simpara>
</refsect1>
<refsect1 id="_resources">
<title>RESOURCES</title>
<simpara>Main web site: <ulink url=""></ulink></simpara>
<simpara>Report bugs to the email &lt;<ulink url="mailto:$(project.email)">$(project.email)</ulink>&gt;</simpara>
</refsect1>
<refsect1 id="_copyright">
<title>COPYRIGHT</title>
<simpara>$(project->license.) <literal>LICENSE</literal> included with the $(project.name) distribution.</simpara>
</refsect1>
</refentry>
endif::backend-docbook[]
endif::doctype-manpage[]
.if !file.exists ("doc/$(project.name:c).txt")
.output "doc/$(project.name:c).txt"
Name(7)
=======


NAME
----
$(project.name:c) - $(project.description:)


SYNOPSIS
--------
----
#include <$(project.header:)>

cc ['flags'] 'files' -l$(project.linkname) ['libraries']
----


DESCRIPTION
-----------

Classes
~~~~~~~

Something.
.endif
.endmacro

function target_docs
    generate_mkman ()
    generate_man_pages ()
endfunction
