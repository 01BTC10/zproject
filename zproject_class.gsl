.#  ===========================================================================
.#  Generate class header/source skeletons
.#
.#   Generates a skeleton for a new class. Will not overwrite existing files.
.#   See project.xml for instructions on how to specify a class.
.#
.#  This script will generate the following files:
.#      * include/$(project.name).h - public project header
.#      * src/$(project.name)_selftest.c - selftest class
.#      * src/$(project.name)_classes.h - private project header
.#      * (include|src)$(class.name).h - public/private header file for classes
.#      * src/$(class.name).c - source code file for classes
.#  ===========================================================================
.#
.#   Resolve XML includes
.#
.if (count (class) > 0)
.#
.#  Build the project header file
.#
.if !file.exists ("include")
.   directory.create ("include")
.endif
.output "include/$(project.name)_library.h"
/*  =========================================================================
    $(project.name) - $(PROJECT.NAME) wrapper

.       for project.license
    $(string.trim (license.):block                                         )
.       endfor

    #################################################################
    #   GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY    #
    #   Please read the README.txt file                             #
    #################################################################
    =========================================================================
*/

#ifndef __$(PROJECT.NAME)_LIBRARY_H_INCLUDED__
#define __$(PROJECT.NAME)_LIBRARY_H_INCLUDED__

//  External dependencies
.for use where !defined (implied)
#include <$(use.project).h>
.endfor

//  $(PROJECT.NAME) version macros for compile-time API detection

#define $(PROJECT.NAME)_VERSION_MAJOR $(project->version.major)
#define $(PROJECT.NAME)_VERSION_MINOR $(project->version.minor)
#define $(PROJECT.NAME)_VERSION_PATCH $(project->version.patch)

#define $(PROJECT.NAME)_MAKE_VERSION(major, minor, patch) \\
    ((major) * 10000 + (minor) * 100 + (patch))
#define $(PROJECT.NAME)_VERSION \\
    $(PROJECT.NAME)_MAKE_VERSION($(PROJECT.NAME)_VERSION_MAJOR, $(PROJECT.NAME)_VERSION_MINOR, $(PROJECT.NAME)_VERSION_PATCH)

#if defined (__WINDOWS__)
#   if defined LIB$(PROJECT.NAME)_STATIC
#       define $(PROJECT.NAME)_EXPORT
#   elif defined LIB$(PROJECT.NAME)_EXPORTS
#       define $(PROJECT.NAME)_EXPORT __declspec(dllexport)
#   else
#       define $(PROJECT.NAME)_EXPORT __declspec(dllimport)
#   endif
#else
#   define $(PROJECT.NAME)_EXPORT
#endif

//  Opaque class structures to allow forward references
.for project.class where !defined (class.private)
typedef struct _$(class.name)_t $(class.name)_t;
#define $(CLASS.NAME)_T_DEFINED
.endfor

.for constant where !defined (constant.private)
.   if first ()
//  Public constants
.   endif
#define $(CONSTANT.NAME)\t$(constant.value) //  $(constant.?'')
.endfor

//  Public API classes
.for project.header
#include "$(header.name).h"
.endfor
.for project.class where !defined (class.private) & class.name <> "$(project.name)"
#include "$(class.name).h"
.endfor

#endif
/*
    #################################################################
    #   GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY    #
    #   Please read the README.txt file in the model directory.     #
    #################################################################
*/    
.#
.#  Build the project selftest file
.#
.echo "Generating src/$(project.name)_selftest.c..."
.output "src/$(project.name)_selftest.c"
/*  =========================================================================
    $(project.name)_selftest.c - run selftests

    Runs all selftests.

    -------------------------------------------------------------------------
.   for project.license
    $(string.trim (license.):block                                         )
.   endfor

    #################################################################
    #   GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY    #
    #   Please read the README.txt file in the model directory.     #
    #################################################################
    =========================================================================
*/

#include "$(project.name)_classes.h"

int
main (int argc, char *argv [])
{
    bool verbose;
    if (argc == 2 && streq (argv [1], "-v"))
        verbose = true;
    else
        verbose = false;

    printf ("Running $(PROJECT.NAME) selftests...\\n");

.for class
    $(class.name)_test (verbose); 
.endfor

    printf ("Tests passed OK\\n");
    return 0;
}
/*
    #################################################################
    #   GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY    #
    #   Please read the README.txt file in the model directory.     #
    #################################################################
*/
.-
.-  Build the classes header for private header files and constants
.-
.echo "Generating src/$(project.name)_classes.h..."
.output "src/$(project.name)_classes.h"
/*  =========================================================================
    $(project.name)_classes - private header file

.   for project.license
    $(string.trim (license.):block                                         )
.   endfor
    #################################################################
    #   GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY    #
    #   Please read the README.txt file in the model directory.     #
    #################################################################
    =========================================================================
*/

#ifndef __$(PROJECT.NAME)_CLASSES_H_INCLUDED__
#define __$(PROJECT.NAME)_CLASSES_H_INCLUDED__

//  External API
#include "../include/$(project.name).h"

//  Internal API
.for class where defined (class.private)
#include "$(class.name).h"
.endfor

.for constant where defined (constant.private)
.   if first ()
//  Private constants    
.   endif
#define $(CONSTANT.NAME)\t$(constant.value) //  $(constant.?'')
.endfor
#endif
.-
.-  Build the header file for a class
.-
.for class
.   if class.private ?= 1
.       class.classdir = "src"
.   endif
.header_file = "$(class.classdir)/$(class.name).h"
.if !file.exists (header_file)
.echo "Generating $(header_file)..."
.   output header_file
/*  =========================================================================
    $(class.name) - $(class.description?'':)

.   for project.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

#ifndef __$(CLASS.NAME)_H_INCLUDED__
#define __$(CLASS.NAME)_H_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif

.   if class.name = project.name
//  Include the library file with typdefs, public includes and public constants    
#include "$(class.name)_library.h"

.   endif  
.   if class.private ?= 1
typedef struct _$(class.name)_t $(class.name)_t;
.  endif

//  @interface
//  Create a new $(class.name)
$(PROJECT.NAME)_EXPORT $(class.name)_t *
    $(class.name)_new ();

//  Destroy the $(class.name)
$(PROJECT.NAME)_EXPORT void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Print properties of object
$(PROJECT.NAME)_EXPORT void
    $(class.name)_print ($(class.name)_t *self);

//  Self test of this class
$(PROJECT.NAME)_EXPORT int
    $(class.name)_test (bool verbose);
//  @end

#ifdef __cplusplus
}
#endif

#endif
.endif
.-
.-  Build the source file for a class
.-
.source_file = "src/$(class.name).c"
.if !file.exists (source_file)
.echo "Generating $(source_file)..."
.   output source_file
/*  =========================================================================
    $(class.name) - $(class.description?'':)

.   for project.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*
@header
    $(class.name) - $(class.description?'':)
@discuss
@end
*/

//  Structure of our class

struct _$(class.name)_t {
};

#include "../include/$(project.name).h"
.   if (count (class, defined (class.private)) > 0)
#include "$(project.name)_classes.h"
.   endif

//  --------------------------------------------------------------------------
//  Create a new $(class.name)

$(class.name)_t *
$(class.name)_new ()
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    assert (self);

    //  TODO: Initialize properties

    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.name)

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;

        //  Free class properties

        //  Free object itself
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Print properties of object

void
$(class.name)_print ($(class.name)_t *self)
{
    assert (self);
}


//  --------------------------------------------------------------------------
//  Selftest

int
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");

    //  @selftest
    //  Simple create/destroy test
    $(class.name)_t *self = $(class.name)_new ();
    assert (self);
    $(class.name)_destroy (&self);
    //  @end

    printf ("OK\\n");
    return 0;
}
.endif
.endfor
.endif
