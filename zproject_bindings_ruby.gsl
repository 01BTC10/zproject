.#  Only build bindings if there is at least one API model
.if count (class, defined (class.api))
.template 0
#  Generate minimal Ruby language bindings.
#  These are not meant to be idiomatic, but to provide a minimal platform
#  of FFI function bindings on which to base idiomatic Ruby classes.
#
#  This is a code generator built using the iMatix GSL code generation
#  language. See https://github.com/imatix/gsl for details. This script
#  is licensed under MIT/X11.
#
if !file.exists ("bindings/ruby/lib/$(project.name:c)/ffi")
   directory.create("bindings/ruby/lib/$(project.name:c)/ffi")
endif

if !file.exists ("bindings/ruby/spec")
   directory.create("bindings/ruby/spec")
endif

project.RubyName = "$(project.name:Pascal)"

for class where defined (class.api)
    class.ruby_require = string.replace (class.c_name, "$(project.name)_|")
    class.RubyName = "$(class.ruby_require:Pascal)"
endfor

# Work out Ruby name based on container.name and and set it as
# container.ruby_name.
function sanitize_ruby_container_name(container)
  my.container.ruby_name = "$(my.container.name:c)"

  # Replace default value from resolve_c_container().
  if my.container.ruby_name = "_"
      my.container.ruby_name = my.container.variadic ?? "args" ? "result"
  endif

  ##
  # Sanitize if it matches a Ruby keyword.
  #

  # Ruby keywords. The only keyword not listed here is 'defined?', but that
  # won't be possible because of the 'c' pretty-print modifier above.
  my.ruby_keywords_regexp = "^(BEGIN|END|__ENCODING__|__END__|__FILE__|__LINE__|alias|and|begin|break|case|class|def|do|else|elsif|end|ensure|false|for|if|in|module|next|nil|not|or|redo|rescue|retry|return|self|super|then|true|undef|unless|until|when|while|yield)$"

  if regexp.match (my.ruby_keywords_regexp, my.container.ruby_name)
      my.container.ruby_name += "_"
  endif
endfunction

function resolve_ruby_container (container)
    sanitize_ruby_container_name(my.container)

    # Defaults
    my.container.ruby_ffi_type = "pointer"

    # All C types should be transformed to a type name recognized by FFI.
    # To handle more C types, add support for them here.
    if my.container.variadic
        my.container.ruby_ffi_type = "varargs"
    elsif my.container.c_type = "void"
        my.container.ruby_ffi_type = "void"
    elsif my.container.c_type = "size_t"
        my.container.ruby_ffi_type = "size_t"
        my.container.coerce_to_c = "Integer($(my.container.ruby_name:))"
    elsif my.container.c_type = "int"
        my.container.ruby_ffi_type = "int"
        my.container.coerce_to_c = "Integer($(my.container.ruby_name:))"
    elsif my.container.c_type = "float"
        my.container.ruby_ffi_type = "float"
        my.container.coerce_to_c = "Float($(my.container.ruby_name:))"
    elsif my.container.c_type = "double"
        my.container.ruby_ffi_type = "double"
        my.container.coerce_to_c = "Float($(my.container.ruby_name:))"
    elsif my.container.c_type = "bool"
        my.container.ruby_ffi_type = "bool"
        my.container.coerce_to_c = "!(0==$(my.container.ruby_name:)||!$(my.container.ruby_name:)) # boolean"
    elsif my.container.c_type = "const char *"
        my.container.ruby_ffi_type = "string"
        my.container.coerce_to_c = "String($(my.container.ruby_name:))"
    elsif my.container.c_type = "byte"
        my.container.ruby_ffi_type = "char"
        my.container.coerce_to_c = "Integer($(my.container.ruby_name:))"
    elsif count (project.class, defined (class.RubyName) & (my.container.type = class.c_name))
        for project.class where (defined (class.RubyName) & (my.container.type = class.c_name))
            if my.container.by_reference
                if defined (my.container.destructor_self)
                    my.container.coerce_to_c = "__ptr_give_ref"
                else
                    my.container.coerce_to_c = "$(my.container.ruby_name:).__ptr_give_ref"
                endif
            else
                my.container.coerce_to_c = "$(my.container.ruby_name:).__ptr if $(my.container.ruby_name:)"
                my.container.coerce_to_ruby = "$(class.RubyName:).__new $(my.container.ruby_name:), "
                my.container.coerce_to_ruby += my.container.fresh ?? "true" ? "false"
            endif
        endfor
    endif
endfunction

function resolve_ruby_method (method)
    my.method.ruby_name = "$(my.method.name:c)"
    for my.method.argument
        resolve_ruby_container (argument)
    endfor
    for my.method.return as ret
        resolve_ruby_container (ret)
    endfor
endfunction

# The line that attaches the function to the project's FFI module
# like: attach_function my_project_method, [:pointer], :int, **opts
function ruby_ffi_attach_definition(method)
    my.attach_definition = "attach_function :$(class.c_name)_$(method.c_name:), ["
    if !my.method.singleton
        my.attach_definition += ":pointer"
        if count (my.method.argument)
            my.attach_definition += ", "
        endif
    endif
    for my.method.argument
        my.attach_definition += ":$(argument.ruby_ffi_type)"
        if !last ()
            my.attach_definition += ", "
        endif
    endfor
    my.attach_definition += "], :$(method->return.ruby_ffi_type), **opts"
    return my.attach_definition
endfunction

# Returns the Ruby method call without arguments,
# like: ::MyProject::FFI.my_class_my_method
function ruby_method_call_without_arguments(method)
  # must not contain newline at the end
  my.call = "::$(project.RubyName:)::FFI.$(class.c_name:)_$(my.method.c_name:)"
  return my.call
endfunction

# The arguments passed to the inner method call,
# like: arg1, arg2, args*
#
# If it's a singleton method, or the class method of a polymorphic method, make
# sure to set self_p first (before the call).
function ruby_method_call_arguments(method)
    my.args = ""
    if !my.method.singleton
        my.args += "self_p"
        if count(my.method.argument)
            my.args += ", "
        endif
    endif
    for my.method.argument
        my.args += argument.variadic ?? "*" ? ""
        my.args += argument.ruby_name
        if !last ()
            my.args += ", "
        endif
    endfor
    return my.args
endfunction

function ruby_method_signature_arguments(method)
    my.args = ""
    for my.method.argument
        if !(my.method.is_destructor & first())
            my.args += argument.variadic ?? "*" ? ""
            my.args += argument.ruby_name
            if !last ()
                my.args += ", "
            endif
        endif
    endfor
    return my.args
endfunction

# The first line of the monomorphic method definition (either class or instance method)
# like: def my_method(arg1, arg2)
#   or: def self.my_method(arg1, arg2)
function ruby_monomorphic_method_signature(method)
    my.def_line = ""
    if my.method.singleton & !my.method.is_destructor
        my.def_line += "self."
    endif
    my.def_line += "$(my.method.c_name:)($(ruby_method_signature_arguments(my.method)))"
    return my.def_line
endfunction

# Ruby methods, which take a pointer to the receiving object,
# like: def self.my_method(self_p, arg1, arg2)
function ruby_polymorphic_method_signature(method)
    my.def_line = "self.$(my.method.c_name:)(self_p"
    my.def_line += count(my.method.argument) ?? ", " ? ""
    my.def_line += ruby_method_signature_arguments(my.method)
    my.def_line += ")"
    return my.def_line
endfunction

function resolve_ruby_class (class)
    for my.class.constructor as method
        resolve_ruby_method (method)
    endfor
    for my.class.destructor as method
        resolve_ruby_method (method)
    endfor
    for my.class.method
        resolve_ruby_method (method)
    endfor
    for my.class.callback_type as method
        resolve_ruby_method (method)
    endfor
endfunction

for class where defined (class.api)
    resolve_ruby_class (class)
endfor

.endtemplate
.#
.output "bindings/ruby/lib/$(project.name:c)/ffi/version.rb"
$(project.GENERATED_WARNING_HEADER:)

module $(project.RubyName:)
  module FFI
    VERSION = '$(project->version.major).$(project->version.minor).$(project->version.patch)'
  end
end

$(project.GENERATED_WARNING_HEADER:)
.#
.output "bindings/ruby/lib/$(project.name:c)/ffi.rb"
$(project.GENERATED_WARNING_HEADER:)

require 'ffi'
require_relative 'ffi/version'

module $(project.RubyName:)
  module FFI
    extend ::FFI::Library

    def self.available?
      @available
    end

    begin
      lib_name = '$(project.libname)'
      lib_paths = ['/usr/local/lib', '/opt/local/lib', '/usr/lib64']
        \.map { |path| "#{path}/#{lib_name}.#{::FFI::Platform::LIBSUFFIX}" }
      ffi_lib lib_paths + [lib_name]
      @available = true
    rescue LoadError
      warn ""
      warn "WARNING: ::$(project.RubyName:)::FFI is not available without $(project.libname)."
      warn ""
      @available = false
    end

    if available?
      opts = {
        blocking: true  # only necessary on MRI to deal with the GIL.
      }
.for class where defined (class.api)

.for constructor as method
      $(ruby_ffi_attach_definition(method))
.endfor
.for destructor as method
      $(ruby_ffi_attach_definition(method))
.endfor
.for method
      $(ruby_ffi_attach_definition(method))
.endfor

      require_relative 'ffi/$(class.ruby_require:)'
.endfor
    end
  end
end

$(project.GENERATED_WARNING_HEADER:)
.#
.for class where defined (class.api)
.output "bindings/ruby/lib/$(project.name:c)/ffi/$(class.ruby_require:).rb"
$(project.GENERATED_WARNING_HEADER:)

module $(project.RubyName:)
  module FFI

    # $(class.description:no,block)
    class $(class.RubyName:)
      class DestroyedError < RuntimeError; end

      # Boilerplate for self pointer, initializer, and finalizer
      class << self
        alias :__new :new
      end
      def initialize ptr, finalize=true
        @ptr = ptr
        if @ptr.null?
          @ptr = nil # Remove null pointers so we don't have to test for them.
        elsif finalize
          @finalizer = self.class.create_finalizer_for @ptr
          ObjectSpace.define_finalizer self, @finalizer
        end
      end
.for class.destructor where count (destructor.argument) = 1
.if first ()
.class.has_ruby_finalizer = 1
      def self.create_finalizer_for ptr
        Proc.new do
          ptr_ptr = ::FFI::MemoryPointer.new :pointer
          ptr_ptr.write_pointer ptr
          ::$(project.RubyName:)::FFI.$(class.c_name)_$(destructor.c_name) ptr_ptr
        end
      end
.endif
.endfor
.if !defined (class.has_ruby_finalizer)
.# TODO: just raise an ImplicitDestroyError
      def self.create_finalizer_for ptr
        Proc.new do
          "WARNING: "\\
          "Objects of type #{self} cannot be destroyed implicitly. "\\
          "Please call the correct destroy method with the relevant arguments."
        end
      end
.endif
      def null?
        !@ptr or @ptr.null?
      end
      # Return internal pointer
      def __ptr
        raise DestroyedError unless @ptr
        @ptr
      end
      # So external Libraries can just pass the Object to a FFI function which expects a :pointer
      alias_method :to_ptr, :__ptr
      # Nullify internal pointer and return pointer pointer
      def __ptr_give_ref
        raise DestroyedError unless @ptr
        ptr_ptr = ::FFI::MemoryPointer.new :pointer
        ptr_ptr.write_pointer @ptr
        ObjectSpace.undefine_finalizer self if @finalizer
        @finalizer = nil
        @ptr = nil
        ptr_ptr
      end
.for callback_type

      # Create a new callback of the following type:
      # $(callback_type.description:no,block)
      #     $(c_callback_typedef (callback_type):no,block)
      #
      # WARNING: If your Ruby code doesn't retain a reference to the
      #   FFI::Function object after passing it to a C function call,
      #   it may be garbage collected while C still holds the pointer,
      #   potentially resulting in a segmentation fault.
      def self.$(callback_type.name)
        ::FFI::Function.new :$(callback_type->return.ruby_ffi_type), [\
.   for callback_type.argument
:$(argument.ruby_ffi_type)\
.       if !last ()
, \
.       endif
.   endfor
], blocking: true do \|\
.   for callback_type.argument
$(argument.ruby_name)\
.       if !last ()
, \
.       endif
.   endfor
\|
.   for callback_type.argument where defined (argument.coerce_to_ruby)
          $(argument.ruby_name) = $(argument.coerce_to_ruby:)
.   endfor
          result = yield \
.   for callback_type.argument
$(argument.ruby_name)\
.       if !last ()
, \
.       endif
.   endfor

.if defined (callback_type->return.coerce_to_c)
          result = $(callback_type->return.coerce_to_c:)
.endif
          result
        end
      end
.endfor
.for constructor as method

      # $(method.description:no,block)
      def $(ruby_monomorphic_method_signature(method))
.for method.argument where defined (argument.coerce_to_c)
        $(argument.ruby_name:) = $(argument.coerce_to_c:)
.endfor
        ptr = $(ruby_method_call_without_arguments(method))($(ruby_method_call_arguments(method)))
        __new ptr
      end
.endfor
.for destructor as method

      # $(method.description:no,block)
      def $(ruby_monomorphic_method_signature(method))
        return unless @ptr
.for method.argument where defined (argument.coerce_to_c)
        $(argument.ruby_name:) = $(argument.coerce_to_c:)
.endfor
        result = $(ruby_method_call_without_arguments(method))($(ruby_method_call_arguments(method)))
.if defined (method->return.coerce_to_ruby)
        result = $(method->return.coerce_to_ruby:)
.endif
        result
      end
.endfor
.for method

      # $(method.description:no,block)
      def $(ruby_monomorphic_method_signature(method))
.if !method.singleton
        raise DestroyedError unless @ptr
.# we do this so actuall FFI call of monomorphic and polymorphic methods is the same
        self_p = @ptr
.endif
.for method.argument where defined (argument.coerce_to_c)
        $(argument.ruby_name:) = $(argument.coerce_to_c:)
.endfor
        result = $(ruby_method_call_without_arguments(method))($(ruby_method_call_arguments(method)))
.if defined (method->return.coerce_to_ruby)
        result = $(method->return.coerce_to_ruby:)
.endif
        result
      end
.if method.polymorphic & !method.singleton # only methods that aren't already singletons
.#
.# NOTE: polymorphic methods will result in 2 Ruby methods:
.# * a normal instance method (already produced above)
.# * a class ("singleton") method, which takes a polymorphic reference

      # $(method.description:no,block)
      #
      # This is the polymorphic version of #$(method.ruby_name:).
      #
      # @param self_p [$(project.RubyName:)::$(class.RubyName:), #__ptr, FFI::Pointer, nil] object reference to use this method on
      def $(ruby_polymorphic_method_signature(method))
        self_p = self_p.__ptr if self_p.respond_to?(:__ptr)
.for method.argument where defined (argument.coerce_to_c)
        $(argument.ruby_name:) = $(argument.coerce_to_c:)
.endfor
        result = $(ruby_method_call_without_arguments(method))($(ruby_method_call_arguments(method)))
.if defined (method->return.coerce_to_ruby)
        result = $(method->return.coerce_to_ruby:)
.endif
        result
      end
.endif
.endfor
    end
  end
end

$(project.GENERATED_WARNING_HEADER:)
.endfor
.#
.if !file.exists ("bindings/ruby/Rakefile")
.output "bindings/ruby/Rakefile"

require 'rspec/core/rake_task'

task :default => :test

# Run tests.
RSpec::Core::RakeTask.new :test do |c|
end
.endif
.#
.if !file.exists ("bindings/ruby/spec/spec_helper.rb")
.output "bindings/ruby/spec/spec_helper.rb"

require '$(project.name)/ffi'

RSpec.configure do |c|
  # Enable 'should' syntax
  c.expect_with(:rspec) { |c| c.syntax = [:should, :expect] }
  c.mock_with(:rspec)   { |c| c.syntax = [:should, :expect] }
end
.endif
.#
.output "bindings/ruby/spec/ffi_spec.rb"
$(project.GENERATED_WARNING_HEADER:)

require 'spec_helper'

describe ::$(project.RubyName:)::FFI do
  it { should be }
end

$(project.GENERATED_WARNING_HEADER:)
.#
.endif
.#
