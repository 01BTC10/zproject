#   Generate nodejs binding & build
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

register_target ("nodejs", "Node.js binding")

#   Target provides name space isolation for its functions
function target_nodejs

function resolve_class (class)
endfunction

.macro generate_binding
.output "$(topdir)/README.md"
# Node.js Binding for $(project.name:)

This is a development kit.

## Prerequisites

### Node.js

* You need Python (v2.7 recommended, v3.x not supported)
* You need (I recommend) nvm and Node.js.
* If your Linux has an existing 'node' command, `sudo apt-get remove node`.
* In every terminal, or .bashrc: `nvm use v5.5.0`

To install the necessary Node tools:

```
sudo apt-get update
sudo apt-get install build-essential libssl-dev
curl https://raw.githubusercontent.com/creationix/nvm/v0.11.1/install.sh | bash
# close terminal, re-open
nvm ls-remote
nvm install v5.5.0
npm install -g node-ninja
npm install -g prebuild
npm install -g bindings
```

To build:

```
mkdir -p $HOME/temp
cd $HOME/temp
git clone https://github.com/zeromq/$(project.name:c)
cd $(project.name:c)/bindings/nodejs
#   Clones dependencies, builds everything
\./build.sh
```

## API

This is a wrapping of the native C $(project.libname) library. See binding.cc for the code.

We get these classes:

.for project.class where scope = "public" & state <> "legacy"
* $(class.name:Pascal) - $(class.description:)
.endfor

.output "$(topdir)/.gitignore"
node_modules
build
binding.Makefile
*.mk
out/
Makefile
logs
*.log
npm-debug.log*
.for project.use where !optional
$(use.project)/
.endfor
.output "$(topdir)/build.sh"
#! /bin/bash
#
#   Builds $(project.name:c).node package from a fresh git clone
#
set -e                      #   exit on any error
FORCE=0
VERBOSE=0
QUIET="--quiet"
LOGLEVEL="--loglevel=error"

for ARG in $*; do
    if [ "$ARG" == "--help" -o "$ARG" == "-h" ]; then
        echo "build.sh"
        echo " --help / -h          This help"
        echo " --force / -f         Force full rebuild"
        echo " --verbose / -v       Show build output"
        echo " --xverbose / -x      Extra verbose"
        exit
    elif [ "$ARG" == "--force" -o "$ARG" == "-f" ]; then
        FORCE=1
    elif [ "$ARG" == "--verbose" -o "$ARG" == "-v" ]; then
        VERBOSE=1
        QUIET=""
        LOGLEVEL=""
    elif [ "$ARG" == "--xverbose" -o "$ARG" == "-x" ]; then
        VERBOSE=1
        QUIET=""
        LOGLEVEL="--loglevel=verbose"
        set -x
    fi
done

BUILD_ROOT=`pwd`
cd ../../..

.for project.use where !optional
#   Check dependent projects
if [ ! -d $(use.project) ]; then
    echo "I:    cloning $(use.repository) into `pwd`/$(use.project)..."
    git clone $QUIET $(use.repository)
fi
if [ ! -f $(use.project)/builds/gyp/project.gyp ]; then
    echo "E:    `pwd`/$(use.project) out of date (builds/gyp/project.gyp missing)"
    exit
fi

.endfor

#   Check Node.js dependencies
cd $BUILD_ROOT
echo "I: checking Node.js dependencies..."

failed=0
set +e
for package in node-ninja bindings nan prebuild; do
    npm list --depth 1 $package > /dev/null 2>&1
    if [ $? -eq 1 ]; then
        npm list --global --depth 1 $package > /dev/null 2>&1
        if [ $? -eq 1 ]; then
            echo "E: $package isn't installed, run 'npm install [-g] $package'"
            failed=1
        fi
    fi
done
test $failed -eq 0 || exit
set -e

#   Calculate how many compiles we can do in parallel
export JOBS=$\([[ $\(uname) = 'Darwin' ]] \\
    && sysctl -n hw.logicalcpu_max \\
    || lscpu -p | egrep -v '^#' | wc -l)

#   Build the binding using node-ninja
echo "I: building Node.js binding:"
prebuild --all --backend=node-ninja
.close
.chmod_x ("$(topdir)/build.sh")
.output "$(topdir)/binding.gyp"
$(project.GENERATED_WARNING_HEADER:)
#   GYP file for $(project.name:) Node.js binding
{
  'targets': [
    {
      'target_name': '$(project.name)',
      'sources': [
          'binding.cc'
      ],
      'include_dirs': [
          "<!(node -e \\"require('nan')\\")",
          -- dependencies!
          '../../include'
      ],
      'dependencies': [
          '../../builds/gyp/project.gyp:$(project.libname)'
      ]
    }
  ]
}
.output "$(topdir)/package.json"
{
  "name": "$(project.name)",
  # ???
  "version": "0.0.0",
  "description": "$(project.name)",
  "scripts": {
    "install": "prebuild --install",
    "test": "echo \\"Error: no test specified\\" && exit 1",
    "rebuild": "prebuild --compile",
    "prebuild": "prebuild --strip --verbose"
  },
  "author": "See AUTHORS",
  "license": "MPL-2.0",
  "gypfile": true,
  "repository": {
    "type": "git",
    # ???
    "url": "https://github.com/hintjens/zyre-nodejs"
  },
  "dependencies": {
    "prebuild": "^3.0.3"
  },
  "devDependencies": {
    "node-ninja": "^0.3.0",
    "nan": "^2.2.0"
  }
}
.output "$(topdir)/binding.cc"
/*  =========================================================================
    $(project.name:c) Node.js binding

.   for project.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

#define $(PROJECT.PREFIX)_BUILD_DRAFT_API
#include "$(project.header).h"
#include "nan.h"

using namespace v8;
using namespace Nan;

.for project.class where scope = "public" & state <> "legacy"
class $(class.name:Pascal): public Nan::ObjectWrap {
    public:
        static NAN_MODULE_INIT (Init) {
            Nan::HandleScope scope;

            // Prepare constructor template
            Local <FunctionTemplate> tpl = Nan::New <FunctionTemplate> (New);
            tpl->SetClassName (Nan::New ("$(class.name:Pascal)").ToLocalChecked ());
            tpl->InstanceTemplate ()->SetInternalFieldCount (1);

            // Prototypes
.   for class.destructor
            Nan::SetPrototypeMethod (tpl, "$(destructor.name)", $(destructor.name));
.   endfor
.   for class.method
            Nan::SetPrototypeMethod (tpl, "$(method.name:Camel)", $(method.c_name));
.   endfor

            constructor ().Reset (Nan::GetFunction (tpl).ToLocalChecked ());
            Nan::Set (target, Nan::New ("$(class.name:Pascal)").ToLocalChecked (),
            Nan::GetFunction (tpl).ToLocalChecked ());
        }
    private:
.   for class.constructor where name = "new"
        explicit $(class.name:Pascal) (arguments) {
            self = $(c_name) (name);
        }
.   else
        explicit $(class.name:Pascal) () {
        }
.   endfor
        ~$(class.name:Pascal) () {
        }

    static NAN_METHOD (New) {
        assert (info.IsConstructCall ());
        $(class.name:Pascal) *$(class.c_name);
.#        if (info [0]->IsString ()) {
.#            Nan::Utf8String name (info [0].As<String>());
.#            $(class.c_name) = new $(class.name:Pascal) (*name);
.#        }
.#        else
        $(class.c_name) = new $(class.name:Pascal) ();
        if ($(class.c_name)) {
            $(class.c_name)->Wrap (info.This ());
            info.GetReturnValue ().Set (info.This ());
        }
    }

.   for class.destructor
    static NAN_METHOD (destroy) {
        $(class.name:Pascal) *$(class.c_name) = Nan::ObjectWrap::Unwrap <$(class.name:Pascal)> (info.Holder ());
        $(class.c_name)_$(destructor.name) (&$(class.c_name)->self);
    }

.   endfor
.   if count (class.constructor)
    static NAN_METHOD (defined) {
        $(class.name:Pascal) *$(class.c_name) = Nan::ObjectWrap::Unwrap <$(class.name:Pascal)> (info.Holder ());
        info.GetReturnValue ().Set (Nan::New ($(class.c_name)->self != NULL));
    }

.   endif
.   for class.method
    static NAN_METHOD ($(method.c_name)) {
        $(class.name:Pascal) *$(class.c_name) = Nan::ObjectWrap::Unwrap <$(class.name:Pascal)> (info.Holder ());
        $(class.c_name)_$(method.c_name) ($(class.c_name)->self);
    }

.   endfor
    static Nan::Persistent <Function> & constructor () {
        static Nan::Persistent <Function> my_constructor;
        return my_constructor;
    }

.   if count (class.constructor)
    $(class.c_name)_t *self;
    public:
        $(class.c_name)_t *get_self () {
            return self;
        }
.   endif
};

.endfor

extern "C" NAN_MODULE_INIT ($(project.name:c)_initialize)
{
.for project.class where scope = "public" & state <> "legacy"
    $(class.name:Pascal)::Init (target);
.endfor
}

NODE_MODULE ($(project.name:c), $(project.name:c)_initialize)
.endmacro

    #   We always need the gyp target
    target_gyp ()

    project.topdir = "bindings/nodejs"
    directory.create (project.topdir)
    for project.class
        resolve_class (class)
    endfor
    generate_binding ()
endfunction
