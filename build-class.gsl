#   build-class.gsl
#
#   Generates a skeleton for a new class. Will not overwrite existing files.
#   See project.xml for instructions on how to specify a class.

#   Template to resolve xml includes
.template 0
function resolve_includes ()
    for project.include
        if defined (include.filename)
            my.include_file = project.load_file (filename)
            if defined (my.include_file)
                move my.include_file after include
            else
                echo "E: error loading include file: $(filename): $(xml.error?)"
            endif
        else
            echo "E: required attribute 'filename' not defined"
        endif
    endfor
endfunction
.endtemplate

.resolve_includes ()
#
#   Build the header file for a class
#
.for class
.   header_file = "include/$(class.name).h"
.       if !file.exists ("include")
.           directory.create ("include")
.       endif
.   if !file.exists (header_file)
.       output header_file
/*  =========================================================================
    $(class.name) - $(class.?'':)

.       for project.license
    $(string.trim (license.):block                                         )
.       endfor
    =========================================================================
*/

#ifndef __$(CLASS.NAME)_H_INCLUDED__
#define __$(CLASS.NAME)_H_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
typedef struct _$(class.name)_t $(class.name)_t;

//  @interface

//  Create a new $(class.name)
$(PROJECT.NAME)_EXPORT $(class.name)_t *
    $(class.name)_new ();

//  Destroy the $(class.name)
$(PROJECT.NAME)_EXPORT void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Print properties of object
$(PROJECT.NAME)_EXPORT void
    $(class.name)_print ($(class.name)_t *self);

//  Self test of this class
$(PROJECT.NAME)_EXPORT int
    $(class.name)_test (bool verbose);
//  @end

#ifdef __cplusplus
}
#endif

#endif
.endif
#
#   Build the source file for a class
#
.source_file = "src/$(class.name).c"
.if !file.exists (source_file)
.   output source_file
/*  =========================================================================
    $(class.name) - $(class.?'':)

.   for project.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*
@header
    $(class.name) - $(class.?'':)
@discuss
@end
*/

.   if defined (class.project_header)
#include "$(class.project_header)"
.   endif
#include "../include/$(class.name).h"

//  Structure of our class

struct _$(class.name)_t {
};


//  --------------------------------------------------------------------------
//  Create a new $(class.name)

$(class.name)_t *
$(class.name)_new ()
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    assert (self);

    //  TODO: Initialize properties

    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.name)

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;

        //  Free class properties

        //  Free object itself
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Print properties of object

void
$(class.name)_print ($(class.name)_t *self)
{
    assert (self);
}


//  --------------------------------------------------------------------------
//  Selftest

int
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");

    //  @selftest
    //  Simple create/destroy test
    $(class.name)_t *self = $(class.name)_new ();
    assert (self);
    $(class.name)_destroy (&self);
    //  @end

    printf ("OK\\n");
    return 0;
}
.endif
.endfor
