#   Generate CMake project file for project
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

register_target ("cmake", "CMake build system")

.macro target_cmake
.output "CMakeLists.txt"
$(project.GENERATED_WARNING_HEADER:)

########################################################################
# Project setup
########################################################################
cmake_minimum_required(VERSION 2.8)
project($(project.name:c))
enable_language(C)
enable_testing()

set(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")

.if count (project.class)
########################################################################
# determine version
########################################################################
foreach(which MAJOR MINOR PATCH)
    file(
        STRINGS
        "${SOURCE_DIR}/include/$(project.prefix)_library.h"
        $(PROJECT.NAME:C)_VERSION_STRING REGEX
        "#define $(PROJECT.NAME:C)_VERSION_${which}"
    )
    string(
        REGEX MATCH
        "#define $(PROJECT.NAME:C)_VERSION_${which} ([0-9_]+)"
        $(PROJECT.NAME:C)_REGEX_MATCH
        "${$(PROJECT.NAME:C)_VERSION_STRING}"
    )
    if (NOT $(PROJECT.NAME:C)_REGEX_MATCH)
        message(
            FATAL_ERROR
            "failed to parse $(PROJECT.NAME:C)_VERSION_${which} from $(project.header:)"
        )
    endif()
    set($(PROJECT.NAME:C)_${which}_VERSION ${CMAKE_MATCH_1})
endforeach(which)

set(
    $(PROJECT.NAME:C)_VERSION
    ${$(PROJECT.NAME:C)_MAJOR_VERSION}.${$(PROJECT.NAME:C)_MINOR_VERSION}.${$(PROJECT.NAME:C)_PATCH_VERSION}
)

.endif
########################################################################
# options
########################################################################
if (EXISTS ".git")
    OPTION (WITH_DRAFTS "Build and install draft classes and methods" ON)
else ()
    OPTION (WITH_DRAFTS "Build and install draft classes and methods" OFF)
endif ()

IF (WITH_DRAFTS)
    ADD_DEFINITIONS (-DWITH_DRAFTS)
ENDIF (WITH_DRAFTS)

########################################################################
# platform.h
########################################################################
include(CheckIncludeFile)
CHECK_INCLUDE_FILE("linux/wireless.h" HAVE_LINUX_WIRELESS_H)
CHECK_INCLUDE_FILE("net/if_media.h" HAVE_NET_IF_MEDIA_H)

include(CheckFunctionExists)
CHECK_FUNCTION_EXISTS("getifaddrs" HAVE_GETIFADDRS)
CHECK_FUNCTION_EXISTS("freeifaddrs" HAVE_FREEIFADDRS)

include(CheckIncludeFiles)
check_include_files("sys/socket.h;net/if.h" HAVE_NET_IF_H)
if (NOT HAVE_NET_IF_H)
    CHECK_INCLUDE_FILE("net/if.h" HAVE_NET_IF_H)
endif()

file(WRITE "${SOURCE_DIR}/src/platform.h.in" "
#cmakedefine HAVE_LINUX_WIRELESS_H
#cmakedefine HAVE_NET_IF_H
#cmakedefine HAVE_NET_IF_MEDIA_H
#cmakedefine HAVE_GETIFADDRS
#cmakedefine HAVE_FREEIFADDRS
")

configure_file("${SOURCE_DIR}/src/platform.h.in" "${SOURCE_DIR}/src/platform.h")

#The MSVC C compiler is too out of date,
#so the sources have to be compiled as c++
if (MSVC)
    enable_language(CXX)
    file(GLOB sources "${SOURCE_DIR}/src/*.c")
    set_source_files_properties(
        ${sources}
        PROPERTIES LANGUAGE CXX
    )
    set(MORE_LIBRARIES ws2_32 Rpcrt4 Iphlpapi)
endif()

# required libraries for mingw
if (MINGW)
    set(MORE_LIBRARIES -lws2_32 -lrpcrt4 -liphlpapi)
endif()

# required libraries for cygwin
if (CYGWIN)
    set(MORE_LIBRARIES -luuid)
endif()

list(APPEND CMAKE_MODULE_PATH "${SOURCE_DIR}")
set(OPTIONAL_LIBRARIES)
.for use

########################################################################
# $(USE.PROJECT) dependency
########################################################################
.if use.optional = 0
find_package($(use.project) REQUIRED)
.else
find_package($(use.project))
.endif
IF ($(USE.PROJECT)_FOUND)
    include_directories(${$(USE.PROJECT)_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${$(USE.PROJECT)_LIBRARIES})
.if use.optional = 1
    add_definitions(-DHAVE_$(USE.PROJECT))
    list(APPEND OPTIONAL_LIBRARIES ${$(USE.PROJECT)_LIBRARIES})
.endif
.if use.optional = 0
ELSE ($(USE.PROJECT)_FOUND)
    message( FATAL_ERROR "$(use.project) not found." )
.endif
ENDIF ($(USE.PROJECT)_FOUND)
.endfor

########################################################################
# includes
########################################################################
set ($(project.name:c)_headers
.if count (project.class)
    include/$(project.prefix)_library.h
.   if file.exists ("include/$(project.prelude)")
    include/$(project.prelude)
.   endif
.   if count (class, class.name = project.name) = 0
    include/$(project.header:)
.   endif
.endif
.for header where scope = "public"
    include/$(name:c).h
.endfor
.for class where scope = "public" & !is_c_element_draft (class)
    include/$(name:c).h
.endfor
.for class where scope = "private"
    src/$(name:c).h
.endfor
.for extra
    src/$(name)
.endfor
)
.if count (class, scope = "public" & is_c_element_draft (class))

IF (WITH_DRAFTS)
list(APPEND $(project.name)_headers
.   for class where scope = "public" & is_c_element_draft (class)
    include/$(name:c).h
.endfor
)
ENDIF (WITH_DRAFTS)

.   endif
source_group ("Header Files" FILES ${$(project.name:c)_headers})
install(FILES ${$(project.name:c)_headers} DESTINATION include)

.if count (project.class)
########################################################################
# library
########################################################################
include_directories("${SOURCE_DIR}/src" "${SOURCE_DIR}/include")
set ($(project.linkname)_sources
.for class where !is_c_element_draft (class)
    src/$(name:c).c
.endfor
)
.if count (class, is_c_element_draft (class))

IF (WITH_DRAFTS)
list(APPEND $(project.linkname)_sources
.   for class where is_c_element_draft (class)
    src/$(name:c).c
.   endfor
)
ENDIF (WITH_DRAFTS)

.endif
source_group("Source Files" FILES ${$(project.linkname)_sources})
if (NOT DEFINED BUILD_SHARED_LIBS)
    SET(BUILD_SHARED_LIBS ON)
endif()
add_library($(project.linkname) ${$(project.linkname)_sources})
set_target_properties($(project.linkname)
    PROPERTIES DEFINE_SYMBOL "$(PROJECT.LIBNAME)_EXPORTS"
)
set_target_properties($(project.linkname)
    PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)
target_link_libraries($(project.linkname)
    ${ZEROMQ_LIBRARIES} ${MORE_LIBRARIES}
)

install(TARGETS $(project.linkname)
    LIBRARY DESTINATION "lib${LIB_SUFFIX}" # .so file
    ARCHIVE DESTINATION "lib${LIB_SUFFIX}" # .lib file
    RUNTIME DESTINATION bin              # .dll file
)
.if file.exists ("src/CMakeLists-local.txt")

include(${CMAKE_CURRENT_SOURCE_DIR}/src/CMakeLists-local.txt) # Optional project-local hook
.endif

########################################################################
# pkgconfig
########################################################################
set(VERSION "${$(PROJECT.NAME:C)_VERSION}")
set(prefix "${CMAKE_INSTALL_PREFIX}")
set(exec_prefix "\\${prefix}")
set(libdir "\\${prefix}/lib${LIB_SUFFIX}")
set(includedir "\\${prefix}/include")
IF (WITH_DRAFTS)
set(pkg_config_defines "-DWITH_DRAFTS=1")
ELSE (WITH_DRAFTS)
set(pkg_config_defines "")
ENDIF (WITH_DRAFTS)
configure_file(
    "${SOURCE_DIR}/src/$(project.libname).pc.in"
    "${SOURCE_DIR}/src/$(project.libname).pc"
@ONLY)

install(
    FILES "${SOURCE_DIR}/src/$(project.libname).pc"
    DESTINATION "lib${LIB_SUFFIX}/pkgconfig"
)

.endif
########################################################################
# executables
########################################################################
.for project.main
add_executable(
    $(main.name)
    "${SOURCE_DIR}/src/$(name).c"
)
target_link_libraries(
    $(main.name)
.if count (project.class)
    $(project.linkname)
.endif
.for project.use
.if use.optional = 0
    ${$(USE.PROJECT)_LIBRARIES}
.endif
.endfor
    ${OPTIONAL_LIBRARIES}
)
set_target_properties(
    $(main.name)
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${SOURCE_DIR}/src"
)
.endfor

########################################################################
# tests
########################################################################
set(CLASSTEST_TIMEOUT 5 CACHE STRING "Timeout of the selftest of a class")
set(TOTAL_TIMEOUT 20 CACHE STRING "Timout of the total testsuite")

set(TEST_CLASSES
.for class where !is_c_element_draft (class)
    $(name:c)
.endfor
)

.if count (class, is_c_element_draft (class))
IF (WITH_DRAFTS)
list(APPEND TEST_CLASSES
.   for class where is_c_element_draft (class)
    $(name:c)
.   endfor
)
ENDIF (WITH_DRAFTS)

.endif
foreach(TEST_CLASS ${TEST_CLASSES})
    add_test(
        NAME ${TEST_CLASS}
        COMMAND $(project.prefix)_selftest --continue --verbose --test ${TEST_CLASS}
    )
    set_tests_properties(
        ${TEST_CLASS}
        PROPERTIES TIMEOUT ${CLASSTEST_TIMEOUT}
    )
endforeach(TEST_CLASS)


########################################################################
# summary
########################################################################
message(STATUS "version: ${$(PROJECT.NAME:C)_VERSION}")
message(STATUS "install: ${CMAKE_INSTALL_PREFIX}")

$(project.GENERATED_WARNING_HEADER:)
.
.for use
.output "Find$(use.project:c).cmake"
$(project.GENERATED_WARNING_HEADER:)

if (NOT MSVC)
    include(FindPkgConfig)
    pkg_check_modules(PC_$(USE.PROJECT) "$(use.libname)")
    if (NOT PC_$(USE.PROJECT)_FOUND)
        pkg_check_modules(PC_$(USE.PROJECT) "$(use.libname)")
    endif (NOT PC_$(USE.PROJECT)_FOUND)
    if (PC_$(USE.PROJECT)_FOUND)
        # some libraries install the headers is a subdirectory of the include dir
        # returned by pkg-config, so use a wildcard match to improve chances of finding
        # headers and SOs.
        set(PC_$(USE.PROJECT)_INCLUDE_HINTS ${PC_$(USE.PROJECT)_INCLUDE_DIRS} ${PC_$(USE.PROJECT)_INCLUDE_DIRS}/*)
        set(PC_$(USE.PROJECT)_LIBRARY_HINTS ${PC_$(USE.PROJECT)_LIBRARY_DIRS} ${PC_$(USE.PROJECT)_LIBRARY_DIRS}/*)
    endif(PC_$(USE.PROJECT)_FOUND)
endif (NOT MSVC)

find_path (
    $(USE.PROJECT)_INCLUDE_DIRS
    NAMES $(use.header)
    HINTS ${PC_$(USE.PROJECT)_INCLUDE_HINTS}
)

find_library (
    $(USE.PROJECT)_LIBRARIES
    NAMES $(use.prefix)
    HINTS ${PC_$(USE.PROJECT)_LIBRARY_HINTS}
)

include(FindPackageHandleStandardArgs)

find_package_handle_standard_args(
    $(USE.PROJECT)
    REQUIRED_VARS $(USE.PROJECT)_LIBRARIES $(USE.PROJECT)_INCLUDE_DIRS
)
mark_as_advanced(
    $(USE.PROJECT)_FOUND
    $(USE.PROJECT)_LIBRARIES $(USE.PROJECT)_INCLUDE_DIRS
)

$(project.GENERATED_WARNING_HEADER:)
.endfor
.endmacro
