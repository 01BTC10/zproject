.template 0
#  Generate minimal JNI language bindings.
#  These are not meant to be idiomatic, but to provide a minimal platform
#  of JNI function bindings on which to base idiomatic Java classes.
#
#  This is a code generator built using the iMatix GSL code generation
#  language. See https://github.com/imatix/gsl for details. This script
#  is licensed under MIT/X11.

global.namespace ?= switches.namespace? "org.zeromq.$(project.prefix)"
global.name_path ?= switches.name_path? "org/zeromq/$(project.prefix)"
global.topdir ?= switches.topdir? "bindings/jni"

### Generate Gradle infrastructure

.macro generate_gradle
.   directory.create ("$(topdir)/gradle/wrapper")
.#
.## -------------------------------------------------------------------------
.   output "$(topdir)/gradle/wrapper/gradle-wrapper.properties"
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\\://services.gradle.org/distributions/gradle-2.8-bin.zip
.#
.## -------------------------------------------------------------------------
.   output "$(topdir)/build.gradle"
apply plugin: 'java'
apply plugin: 'maven'
group = "org.zeromq"
version = "0.1.0-SNAPSHOT"

repositories {
    mavenLocal()
    mavenCentral()
}
sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}
task generateJniHeaders(type: Exec, dependsOn: 'classes') {
    def classpath = sourceSets.main.output.classesDir
    def nativeIncludes = "src/native/include"
    def jniClasses = [
.       for project.class where defined (class.api)
            '$(namespace).$(name:pascal)'$(last ()?? ""? ",")
.       endfor
    ]
    commandLine("javah", "-d", "$nativeIncludes", "-classpath", "$classpath", *jniClasses)
}
tasks.withType(Test) {
    systemProperty "java.library.path", "/usr/lib:/usr/local/lib:$projectDir"
}
task initCMake(type: Exec, dependsOn: 'generateJniHeaders') {
    commandLine "cmake", "."
}
task buildNative(type: Exec, dependsOn: 'initCMake') {
    commandLine "make"
}
jar.dependsOn buildNative
test.dependsOn buildNative
.#
.## -------------------------------------------------------------------------
.   output "$(topdir)/CMakeLists.txt"
cmake_minimum_required (VERSION 2.8)

project ($(project.prefix)jni CXX)
enable_language (C)
find_package (JNI REQUIRED)
find_library (ZMQ_LIBRARY NAMES zmq libzmq REQUIRED)
find_library ($(PROJECT.PREFIX)_LIBRARY NAMES $(project.prefix) REQUIRED)
include_directories (${JAVA_INCLUDE_PATH} ${JAVA_INCLUDE_PATH2} src/native/include)

set ($(project.prefix)jni_sources
.   for project.class where defined (class.api)
   src/main/c/$(name).c
.   endfor
)
add_library ($(project.prefix)jni SHARED ${$(project.prefix)jni_sources})
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pedantic -O2")
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)

target_link_libraries ($(project.prefix)jni ${ZMQ_LIBRARY} ${$(PROJECT.PREFIX)_LIBRARY})
.#
.## -------------------------------------------------------------------------
.   output "$(topdir)/gradlew"
#!/usr/bin/env bash
#   Gradle start up script for Linux/UN*X

#   Add default JVM options here.
#   You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script
DEFAULT_JVM_OPTS=""

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`
# Use the maximum available, or set MAX_FD != -1 to use that value
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

#   OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
esac

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \\(.*\\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \\"$PRG\\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \\"-Xdock:name=$APP_NAME\\" \\"-Xdock:icon=$APP_HOME/media/gradle.icns\\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\\"$arg\\""
        fi
        i=$\((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
function splitJvmOpts() {
    JVM_OPTS=("$@")
}
eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"

exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
.#
.## -------------------------------------------------------------------------
.   output "$(topdir)/gradlew.bat"
@if "%DEBUG%" == "" @echo off
@rem  Gradle startup script for Windows

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

@rem Add default JVM options here.
@rem You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS=

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto init

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto init

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:init
@rem Get command-line arguments, handling Windowz variants

if not "%OS%" == "Windows_NT" goto win9xME_args
if "%@eval[2+2]" == "4" goto 4NT_args

:win9xME_args
@rem Slurp the command line arguments.
set CMD_LINE_ARGS=
set _SKIP=2

:win9xME_args_slurp
if "x%~1" == "x" goto execute

set CMD_LINE_ARGS=%*
goto execute

:4NT_args
@rem Get arguments from the 4NT Shell from JP Software
set CMD_LINE_ARGS=%$

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar

@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
.#
.## -------------------------------------------------------------------------
.   output "$(topdir)/README.md"
# $(project.prefix)-jni

JNI Binding for $(project.name:)

## Usage

Ensure you have cmake installed

```
\./grade test
```

## License

$(project->license.:)
.#
.## -------------------------------------------------------------------------
.   output "$(topdir)/settings.gradle"
rootProject.name = '$(project.prefix)-jni'
.endmacro

function resolve_jni_container (container)
    if my.container.variadic
        # ctypes doesn't explicitly state variadic signatures, so leave it off
        my.container.jni_type = ""
    elsif my.container.type = "nothing"
        my.container.jni_type = "void"
    elsif my.container.type = "anything"
        my.container.jni_type = "void *"
    elsif my.container.type = "boolean"
        my.container.jni_type = "boolean"
    elsif my.container.type = "byte"
        my.container.jni_type = "byte"
    elsif my.container.type = "integer"
        my.container.jni_type = "int"
    elsif my.container.type = "size"
        my.container.jni_type = "long"
    elsif my.container.type = "real"
        my.container.jni_type = "float"
    elsif my.container.type = "buffer"
        my.container.jni_type = "byte []"
    elsif my.container.type = "string"
        my.container.jni_type = "String"
    elsif my.container.type = "time"
        my.container.jni_type = "long"
    elsif my.container.type = "file_size"
        my.container.jni_type = "long"
    elsif defined (project.imports_$(my.container.type))
        my.container.jni_type = "$(type:pascal)"
    elsif count (project.class, class.name = my.container.type)
        my.container.jni_type = "$(type:pascal)"
    endif
endfunction

function resolve_jni_method (method)
    my.method.jni_name = "$(my.method.name:c)"
    my.method.jni_okay = 1
    my.method.jni_return = "void"

    if my.method.singleton = 0
        my.method.jni_argsdef = "long pointer"
        my.method.jni_argsuse = "pointer"
        comma = ","
    else
        my.method.jni_argsdef = ""
        my.method.jni_argsuse = ""
        comma = ""
    endif

    for my.method.argument
        resolve_jni_container (argument)
        if defined (argument.jni_type)
            jni_argsdef += "$(comma)$(argument.jni_type:) $(argument.name:camel)"
            jni_argsuse += "$(comma)$(argument.name:camel)"
            comma = ", "
        else
            echo "Removing $(class.name).$(my.method.jni_name:) as unsupported, no $(argument.type:)"
            my.method.okay = 0
        endif
    endfor

    for my.method.return
        resolve_jni_container ([return])
        if defined (return.jni_type)
            my.method.jni_return = return.jni_type
        else
            echo "Removing $(class.name).$(my.method.jni_name:) as unsupported, no $(return.type:)"
            my.method.okay = 0
        endif
    endfor
endfunction

.macro generate_class_java (class)
.   for method
.       resolve_jni_method (method)
.   endfor
.   directory.create ("$(topdir)/src/main/java/$(name_path)")
.   output "$(topdir)/src/main/java/$(name_path)/$(my.class.name:pascal).java"
package org.zeromq.$(project.name:c);

public class $(my.class.name:pascal) implements AutoCloseable {
    static {
        try {
            System.loadLibrary ("$(project.name:c)jni");
        }
        catch (Exception e) {
            System.exit (-1);
        }
    }
    long pointer;

.   for constructor
.       resolve_jni_method (constructor)
    native static long __init ();
    public () {
        pointer = __init ();
    }
    public $(my.class.name:pascal) (long address) {
        pointer = address;
    }

.   endfor
.   for method where jni_okay
    native static $(method.jni_return:) __$(jni_name:) ($(jni_argsdef:));
    public $(method.jni_return:) $(jni_name:) ($(jni_argsdef:)) {
        return $(class.name:pascal).__$(jni_name:) ($(jni_argsuse:));
    }

.   endfor
.   for destructor
    native static void __destroy (long pointer);
    @Override
    public void close() {
        __destroy (pointer);
        pointer = 0;
    }
.   endfor
}
.endmacro

for project.class where defined (class.api)
    if first ()
        generate_gradle ()
    endif
    generate_class_java (class)
endfor

/*
    directory.create ("$(topdir)/src/main/c")
    class.filename = "$(namespace:c)_$(class.name:pascal)"
    output "$(topdir)/src/main/c/$(filename:).c"
    >#include <jni.h>
    >#include <stdio.h>
    >#include "$(filename:).h"
    >#include "$(project.name:c).h"

    for constructor
        >
        >JNIEXPORT void JNICALL Java_$(filename:)_create (JNIEnv *env, jobject thisObj) {
        >}
    endfor
    for destructor
        >
        >JNIEXPORT void JNICALL Java_$(filename:)_destroy (JNIEnv *env, jobject thisObj) {
        >}
    endfor
    for method
        >
        >//  $(method.description:no,block)
        >JNIEXPORT void JNICALL Java_$(filename:)_$(name:camel) (JNIEnv *env, jobject thisObj) {
        >}
    endfor
endfor
*/

.endtemplate
