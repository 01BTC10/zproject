.template 0
#   zproject
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

#   Resolve XML includes
function resolve_includes (xml)
    for my.xml.include
        if !defined (include.filename)
            abort "E: required attribute 'filename' not defined"
        endif
        my.include_file = my.xml.load_file (filename)?
        if defined (my.include_file)
            move my.include_file after include
        else
            abort "E: <include> failed: $(xml.error?)"
        endif
    endfor
endfunction

resolve_includes (project)

# Check if project contains one or more C++ sources
function project_use_cxx ()
    use_cxx = 0
    for class
        if file.exists ("src/$(name).cc")
            return 1
        endif
    endfor
    for main
        if file.exists ("src/$(name).cc")
            return 1
        endif
    endfor
    return 0
endfunction

project.use_cxx = project_use_cxx ()
project.name ?= "myproject"
project.prefix ?= "$(project.name:c)"
project.linkname ?= project.prefix
project.libname ?= "lib" + project.linkname
project.prelude ?= project.prefix + "_prelude.h"
project.description ?= "Project"
project.header ?= "$(project.name:c).h"

if count (project.version) = 0
    new version to project
    endnew
endif
project->version.major ?= 0
project->version.minor ?= 0
project->version.patch ?= 0
project.email ?= "email@hostname.com"
if count (project.license) = 0
    new license to project
    endnew
endif
project->license. ?= "Copyright (c) the Authors"

project.has_main = (count (main) > 0)
project.exports_classes = (count (class, !defined (class.private)) > 0)
project.generated_warning_header ?= "\
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################"

function chmod_x (filename)
    my.shell = proc.new ("chmod +x $(my.filename:)")
    my.shell.run ()
endfunction

function register_target (target, detail)
    new handler to project
        handler.target = my.target
        handler.detail = my.detail
    endnew
endfunction

function build_target (target)
    if my.target = "?"
        echo "Valid targets are:"
        for project.handler by target
            echo "    $(target)\
                    $(detail:)"
        endfor
    elsif my.target = "*"
        for project.handler by target
            if handler.target <> "autotools" & handler.target <> "cmake"
                echo "Building $(detail:) ($(handler.target))"
                scope project
                    target_$(handler.target:c) ()
                endscope
            endif
        endfor
    else
        for project.handler where handler.target = my.target
            echo "Building $(detail:) ($(handler.target))"
            scope project
                target_$(handler.target:c) ()
            endscope
        else
            echo "$(my.target) is not a valid target; valid targets are:"
            for project.handler by target
                echo "    $(target)\
                    $(detail:)"
            endfor
        endfor
    endif
endfunction

#  These scripts must be run first to resolve missing or
#  implicit details in the model before code generation.
gsl from "zproject_projects.gsl"
gsl from "zproject_class_api.gsl"
if switches.save ?= 1
    project.save ("save.xml")
endif

#   Generate main class support
gsl from "zproject_class.gsl"

#   Always run these, in any order
gsl from "zproject_skeletons.gsl"
gsl from "zproject_bench.gsl"
gsl from "zproject_git.gsl"
gsl from "zproject_valgrind.gsl"

#   Load all targets
gsl from "zproject_android.gsl"
gsl from "zproject_autotools.gsl"
gsl from "zproject_cmake.gsl"
gsl from "zproject_cygwin.gsl"
gsl from "zproject_debian.gsl"
gsl from "zproject_docker.gsl"
gsl from "zproject_gyp.gsl"
gsl from "zproject_java.gsl"
gsl from "zproject_java_msvc.gsl"
gsl from "zproject_mingw32.gsl"
gsl from "zproject_nuget.gsl"
gsl from "zproject_python.gsl"
gsl from "zproject_qml.gsl"
gsl from "zproject_qt.gsl"
gsl from "zproject_redhat.gsl"
gsl from "zproject_ruby.gsl"
gsl from "zproject_travis.gsl"
gsl from "zproject_vs2008.gsl"
gsl from "zproject_vs20xx.gsl"
gsl from "zproject_vs20xx_props.gsl"

#   Build targets requested by project
if defined (switches.target)
    build_target (switches.target)
else
    #   Build mandatory targets
    build_target ("autotools")
    build_target ("cmake")
    for project.target
        build_target (target.name)
    endfor
endif

.endtemplate
