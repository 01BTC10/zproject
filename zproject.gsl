.template 0
#  This is a code generator built using the iMatix GSL code generation
#  language. See https://github.com/imatix/gsl for details. This script
#  is licensed under MIT/X11.

#   Resolve XML includes
function resolve_includes (xml)
    for my.xml.include
        if !defined (include.filename)
            abort "E: required attribute 'filename' not defined"
        endif
        my.include_file = my.xml.load_file (filename)?
        if defined (my.include_file)
            move my.include_file after include
        else
            abort "E: <include> failed: $(xml.error?)"
        endif
    endfor
endfunction

resolve_includes (project)

# Check if project contains one or more C++ sources
function project_use_cxx ()
    use_cxx = 0
    for class
        if file.exists ("src/$(name).cc")
            return 1
        endif
    endfor
    for main
        if file.exists ("src/$(name).cc")
            return 1
        endif
    endfor
    return 0
endfunction

project.use_cxx = project_use_cxx ()
project.name ?= "myproject"
project.prefix ?= "$(project.name:c)"
project.linkname ?= project.prefix
project.libname ?= "lib" + project.linkname
project.prelude ?= project.prefix + "_prelude.h"
project.description ?= "Project"
project.header ?= "$(project.name:c).h"

if count (project.version) = 0
    new version to project
    endnew
endif
project->version.major ?= 0
project->version.minor ?= 0
project->version.patch ?= 0
project.email ?= "email@hostname.com"
if count (project.license) = 0
    new license to project
    endnew
endif
project->license. ?= "Copyright (c) the Authors"

project.has_main = (count (main) > 0)
project.exports_classes = (count (class, !defined (class.private)) > 0)
project.generated_warning_header ?= "\
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################"

function chmod_x (filename)
    my.shell = proc.new ("chmod +x $(my.filename:)")
    my.shell.run ()
endfunction

function target_register (target, detail)
    new target_handler to project
        target_handler.target = my.target
        target_handler.detail = my.detail
    endnew
endfunction

#  These scripts must be run first to resolve missing or
#  implicit details in the model before code generation.
gsl from "zproject_projects.gsl"
gsl from "zproject_class_api.gsl"
if switches.save ?= 1
    project.save ("save.xml")
endif

#   Always run these, in any order
gsl from "zproject_actor.gsl"
gsl from "zproject_bench.gsl"
gsl from "zproject_class.gsl"
gsl from "zproject_git.gsl"
gsl from "zproject_valgrind.gsl"
gsl from "zproject_mkman.gsl"

#   Optional targets
gsl from "zproject_android.gsl"
gsl from "zproject_autotools.gsl"
gsl from "zproject_cmake.gsl"
gsl from "zproject_docs.gsl"
gsl from "zproject_mingw32.gsl"
gsl from "zproject_cygwin.gsl"
gsl from "zproject_vs2008.gsl"
gsl from "zproject_vs20xx.gsl"
gsl from "zproject_vs20xx_props.gsl"
gsl from "zproject_nuget.gsl"
gsl from "zproject_python.gsl"
gsl from "zproject_qml.gsl"
gsl from "zproject_qt.gsl"
gsl from "zproject_ruby.gsl"
gsl from "zproject_java.gsl"
gsl from "zproject_java_msvc.gsl"
gsl from "zproject_travis.gsl"
gsl from "zproject_debian.gsl"
gsl from "zproject_redhat.gsl"
gsl from "zproject_docker.gsl"

target_android ()
target_autotools ()
target_cmake ()
target_docs ()

echo "Generating Windows support..."
target_mingw32 ()
target_cygwin ()
target_vs2008 ()
target_vs2010 ()
target_vs2012 ()
target_vs2013 ()
target_vs2015 ()
target_nuget ()

echo "Generating language bindings..."
echo " - Python..."
target_python ()

echo " - QML..."
target_qml ()

echo " - Qt..."
target_qt ()

echo " - Ruby FFI..."
target_ruby ()

echo " - Java JNI..."
target_java ()
target_java_msvc ()

echo "Generating miscellaneous support..."
target_travis ()

echo "Generating distro packaging recipes"
target_debian ()
target_redhat ()
target_docker ()
.endtemplate
