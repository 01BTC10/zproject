.template 0
#  This is a code generator built using the iMatix GSL code generation
#  language. See https://github.com/imatix/gsl for details. This script
#  is licensed under MIT/X11.

#   Resolve XML includes
function resolve_includes (xml)
    for my.xml.include
        if !defined (include.filename)
            abort "E: required attribute 'filename' not defined"
        endif
        my.include_file = my.xml.load_file (filename)?
        if defined (my.include_file)
            move my.include_file after include
        else
            abort "E: <include> failed: $(xml.error?)"
        endif
    endfor
endfunction

resolve_includes (project)

# Find c++ sources in the project
function project_use_cxx ()
    use_cxx = 0
    for class
        if file.exists ("src/$(name).cc")
            return 1
        endif
    endfor
    for main
        if file.exists ("src/$(name).cc")
            return 1
        endif
    endfor
    return 0
endfunction

project.use_cxx = project_use_cxx ()
project.name ?= "myproject"
project.prefix ?= "$(project.name:c)"
project.linkname ?= project.prefix
project.libname ?= "lib" + project.linkname
project.prelude ?= project.prefix + "_prelude.h"
project.description ?= "Project"
project.header ?= "$(project.name:c).h"

if count (project.version) = 0
    new version to project
    endnew
endif
project->version.major ?= 0
project->version.minor ?= 0
project->version.patch ?= 0
project.email ?= "email@hostname.com"
if count (project.license) = 0
    new license to project
    endnew
endif
project->license. ?= "Copyright (c) the Authors"

project.has_main = (count (main) > 0)
project.has_classes = (count (class, ! defined (class.private)) > 0)
project.has_private_classes = (count (class, defined (class.private)) > 0)
project.generated_warning_header ?= "\
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################"

function chmod_x (filename)
    my.shell = proc.new ("chmod +x $(my.filename:)")
    my.shell.run ()
endfunction

.endtemplate
.#  These scripts must be run first to resolve missing or
.#  implicit details in the model before code generation.
.gsl from "zproject_projects.gsl"
.gsl from "zproject_class_api.gsl"
.#
.#  These scripts generate code independently from one another
.#  so are not run in any particular order other than alphabetically.
.echo "Generating build scripts..."
.gsl from "zproject_actor.gsl"
.gsl from "zproject_android.gsl"
.gsl from "zproject_autoconf.gsl"
.gsl from "zproject_automake.gsl"
.gsl from "zproject_class.gsl"
.gsl from "zproject_cmake.gsl"
.gsl from "zproject_docs.gsl"
.gsl from "zproject_mkman.gsl"
.gsl from "zproject_lib.gsl"
.gsl from "zproject_mingw32.gsl"
.gsl from "zproject_cygwin.gsl"
.gsl from "zproject_qt_android.gsl"
.gsl from "zproject_vs2008.gsl"
.gsl from "zproject_vs2010.gsl"
.gsl from "zproject_vs2012.gsl"
.gsl from "zproject_vs2013.gsl"
.gsl from "zproject_vs2015.gsl"
.echo "Generating language bindings..."
.echo " - Python..."
.gsl from "zproject_bindings_python.gsl"
.echo " - QML..."
.gsl from "zproject_bindings_qml.gsl"
.echo " - Qt..."
.gsl from "zproject_bindings_qt.gsl"
.echo " - Ruby FFI..."
.gsl from "zproject_bindings_ruby.gsl"
.echo " - Java JNI..."
.gsl from "zproject_bindings_jni.gsl"
.echo "Generating miscellaneous support..."
.gsl from "zproject_ci.gsl"
.gsl from "zproject_bench.gsl"
.gsl from "zproject_tools.gsl"
.gsl from "zproject_git.gsl"
.echo "Generating distro packaging recipes"
.gsl from "zproject_debian.gsl"
.gsl from "zproject_spec.gsl"
