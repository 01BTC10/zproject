.template 0
#  ===========================================================================
#  Resolve standard CLASS projects
#
#  ===========================================================================

function resolve_project_dependency (use)
    my.known_projects = XML.load_file ("zproject_known_projects.xml")
    
    # Use known values to fill in gaps if it is a known project
    for my.known_projects.use as known where known.project = my.use.project
        my.use.repository  ?= known.repository?
        my.use.test        ?= known.test?
        my.use.cmake_name  ?= known.cmake_name?
        my.use.includename ?= known.includename?
        my.use.prefix      ?= known.prefix?
        my.use.linkname    ?= known.linkname?
        my.use.libname     ?= known.libname?

        # Copy known implied dependencies into this dependency
        for known.use as implied_use
            if !count (my.use.use, use.project = implied_use.project)
                move implied_use to my.use as use
            endif
        endfor
    endfor
    
    # Use reasonable fallback values to fill in any remaining gaps
    my.use.prefix ?= my.use.project
    my.use.linkname ?= my.use.prefix
    my.use.includename ?= my.use.prefix
    my.use.libname ?= my.use.project
    my.use.cmake_name ?= "$(my.use.project:Pascal)"
    my.use.optional ?= 0
    my.use.min_major ?= 0
    my.use.min_minor ?= 0
    my.use.min_patch ?= 0

    # For values with no reasonable fallback, print error
    if !defined (my.use.test)
        echo "Project $(my.use.project) needs a 'test' attribute"
    endif
    
    # Calculate all non-model values from model values
    my.use.min_version = "$(min_major).$(min_minor).$(min_patch)"
    
    # Copy all dependencies implied by this one into the project
    for my.use.use as implied_use
        if !count (project.use, use.project = implied_use.project)
            move implied_use before my.use as use
            implied_use.implied = "1"
            resolve_project_dependency (implied_use)
        endif
    endfor
endfunction

function resolve_extra (main)
    for extra where defined (extra.type)
        if my.main->extra.type = "systemd-tmpfiles"
            my.main->extra.name ?= "$(main.name).conf"
            my.main->extra.path ?= "/usr/lib/tmpfiles.d"
        endif
    endfor
endfunction

function resolve_scope (item)
    if my.item.private ?= 1
        my.item.scope = "private"
    else
        my.item.scope = "public"
    endif
endfunction

for project.use
    resolve_project_dependency (use)
endfor
for project.main
    resolve_scope (main)
    resolve_extra (main)
endfor
for project.class
    resolve_scope (class)
endfor
for project.constant
    resolve_scope (constant)
endfor
for project.header
    resolve_scope (header)
endfor

#   All projects contain a selftest main
if count (project.main, name = "$(prefix)_selftest") = 0
    new main to project
        main.name = "$(prefix)_selftest"
        main.test = 1
        main.scope = "private"
    endnew
endif

.endtemplate
