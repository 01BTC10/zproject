#   Generate continuous integration test files
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

register_target ("travis", "Travis CI scripts")

.macro target_travis
.if !file.exists (".travis.yml")
.   echo "Generating skeleton .travis.yml script"
.   output ".travis.yml"
# Travis CI script
language: c

cache: ccache

os:
- linux

sudo: false

services:
- docker

env:
- BUILD_TYPE=default
- BUILD_TYPE=default-Werror
- BUILD_TYPE=cmake
#- BUILD_TYPE=android
#- BUILD_TYPE=check-py

matrix:
  include:
  - env: BUILD_TYPE=valgrind
    os: linux
    dist: trusty
    sudo: required
    addons:
      apt:
        packages:
        - valgrind

addons:
  apt:
    packages:
    - git
    - asciidoc
    - xmlto

before_install:
- if [ $TRAVIS_OS_NAME == "osx" ] ; then brew update; brew install binutils valgrind ; fi

# Hand off to generated script for each BUILD_TYPE
script: ./ci_build.sh
before_deploy: . ./ci_deploy.sh
deploy:
  provider: releases
  api_key:
    # To encrypt your access token run: `travis encrypt -r user/repo`
    secure: <encrypted github access token>
  file_glob: true
  file: ${$(PROJECT.NAME:c)_DEPLOYMENT}
  skip_cleanup: true
  on:
    branch: master
    tags: true
    condition: $TRAVIS_OS_NAME =~ (linux) && $BUILD_TYPE =~ (default)
.   close
.endif
.
.output "ci_build.sh"
#!/usr/bin/env bash

$(project.GENERATED_WARNING_HEADER)

set -x
set -e

if [ "$BUILD_TYPE" == "default" ] || [ "$BUILD_TYPE" == "default-Werror" ] ; then
    LANG=C
    LC_ALL=C
    export LANG LC_ALL

    if [ -d "./tmp" ]; then
        rm -rf ./tmp
    fi
    mkdir -p tmp
    BUILD_PREFIX=$PWD/tmp

    PATH="`echo "$PATH" | sed -e 's,^/usr/lib/ccache/?:,,' -e 's,:/usr/lib/ccache/?:,,' -e 's,:/usr/lib/ccache/?$,,' -e 's,^/usr/lib/ccache/?$,,'2`"
    CCACHE_PATH="$PATH"
    CCACHE_DIR="${HOME}/.ccache"
    export CCACHE_PATH CCACHE_DIR PATH
    HAVE_CCACHE=no
    if which ccache && ls -la /usr/lib/ccache ; then
        HAVE_CCACHE=yes
    fi

    if [ "$HAVE_CCACHE" = yes ] && [ -d "$CCACHE_DIR" ]; then
        echo "CCache stats before build:"
        ccache -s || true
    fi
    mkdir -p "${HOME}/.ccache"

    CONFIG_OPTS=()
    COMMON_CFLAGS=""
    EXTRA_CFLAGS=""
    EXTRA_CPPFLAGS=""
    EXTRA_CXXFLAGS=""

    is_gnucc() {
        if [ -z "$1" ] && "$1" --version 2>&1 | grep 'Free Software Foundation' > /dev/null ; then true ; else false ; fi
    }

    COMPILER_FAMILY=""
    if [ -n "$CC" -a -n "$CXX" ]; then
        if is_gnucc "$CC" && is_gnucc "$CXX" ; then
            COMPILER_FAMILY="GCC"
            export CC CXX
        fi
    else
        if is_gnucc "gcc" && is_gnucc "g++" ; then
            # Autoconf would pick this by default
            COMPILER_FAMILY="GCC"
            [ -n "$CC" ] || CC=gcc
            [ -n "$CXX" ] || CXX=g++
            export CC CXX
        elif is_gnucc "cc" && is_gnucc "c++" ; then
            COMPILER_FAMILY="GCC"
            [ -n "$CC" ] || CC=cc
            [ -n "$CXX" ] || CXX=c++
            export CC CXX
        fi
    fi

    if [ -n "$CPP" ] ; then
        [ -x "$CPP" ] && export CPP
    else
        if is_gnucc "cpp" ; then
            CPP=cpp && export CPP
        fi
    fi

    if [ "$BUILD_TYPE" == "default-Werror" ] ; then
        case "${COMPILER_FAMILY}" in
            GCC)
                echo "NOTE: Enabling ${COMPILER_FAMILY} compiler pedantic error-checking flags for BUILD_TYPE='$BUILD_TYPE'" >&2
                COMMON_CFLAGS="-Wall -Werror"
                EXTRA_CFLAGS="-std=c99"
                EXTRA_CPPFLAGS=""
                EXTRA_CXXFLAGS="-std=c++99"
                ;;
            *)
                echo "WARNING: Current compiler is not GCC, not enabling pedantic error-checking flags for BUILD_TYPE='$BUILD_TYPE'" >&2
                ;;
        esac
    fi
    CONFIG_OPTS+=("CFLAGS=-I${BUILD_PREFIX}/include ${COMMON_CFLAGS} ${EXTRA_CFLAGS}")
    CONFIG_OPTS+=("CPPFLAGS=-I${BUILD_PREFIX}/include ${COMMON_CFLAGS} ${EXTRA_CPPFLAGS}")
    CONFIG_OPTS+=("CXXFLAGS=-I${BUILD_PREFIX}/include ${COMMON_CFLAGS} ${EXTRA_CXXFLAGS}")
    CONFIG_OPTS+=("LDFLAGS=-L${BUILD_PREFIX}/lib")
    CONFIG_OPTS+=("PKG_CONFIG_PATH=${BUILD_PREFIX}/lib/pkgconfig")
    CONFIG_OPTS+=("--prefix=${BUILD_PREFIX}")
    CONFIG_OPTS+=("--with-docs=no")
    CONFIG_OPTS+=("--quiet")

    if [ "$HAVE_CCACHE" = yes ] && [ "${COMPILER_FAMILY}" = GCC ]; then
        PATH="/usr/lib/ccache:$PATH"
        export PATH
        if [ -n "$CC" ] && [ -x "/usr/lib/ccache/`basename "$CC"`" ]; then
            case "$CC" in
                *ccache*) ;;
                */*) DIR_CC="`dirname "$CC"`" && [ -n "$DIR_CC" ] && DIR_CC="`cd "$DIR_CC" && pwd `" && [ -n "$DIR_CC" ] && [ -d "$DIR_CC" ] || DIR_CC=""
                    [ -z "$CCACHE_PATH" ] && CCACHE_PATH="$DIR_CC" || \
                    if echo "$CCACHE_PATH" | egrep '(^'"$DIR_CC"':.*|^'"$DIR_CC"'$|:'"$DIR_CC"':|:'"$DIR_CC"'$)' ; then
                        CCACHE_PATH="$DIR_CC:$CCACHE_PATH"
                    fi
                    ;;
            esac
            CC="/usr/lib/ccache/`basename "$CC"`"
        else
            : # CC="ccache $CC"
        fi
        if [ -n "$CXX" ] && [ -x "/usr/lib/ccache/`basename "$CXX"`" ]; then
            case "$CXX" in
                *ccache*) ;;
                */*) DIR_CXX="`dirname "$CXX"`" && [ -n "$DIR_CXX" ] && DIR_CXX="`cd "$DIR_CXX" && pwd `" && [ -n "$DIR_CXX" ] && [ -d "$DIR_CXX" ] || DIR_CXX=""
                    [ -z "$CCACHE_PATH" ] && CCACHE_PATH="$DIR_CXX" || \
                    if echo "$CCACHE_PATH" | egrep '(^'"$DIR_CXX"':.*|^'"$DIR_CXX"'$|:'"$DIR_CXX"':|:'"$DIR_CXX"'$)' ; then
                        CCACHE_PATH="$DIR_CXX:$CCACHE_PATH"
                    fi
                    ;;
            esac
            CXX="/usr/lib/ccache/`basename "$CXX"`"
        else
            : # CXX="ccache $CXX"
        fi
        if [ -n "$CPP" ] && [ -x "/usr/lib/ccache/`basename "$CPP"`" ]; then
            case "$CPP" in
                *ccache*) ;;
                */*) DIR_CPP="`dirname "$CPP"`" && [ -n "$DIR_CPP" ] && DIR_CPP="`cd "$DIR_CPP" && pwd `" && [ -n "$DIR_CPP" ] && [ -d "$DIR_CPP" ] || DIR_CPP=""
                    [ -z "$CCACHE_PATH" ] && CCACHE_PATH="$DIR_CPP" || \
                    if echo "$CCACHE_PATH" | egrep '(^'"$DIR_CPP"':.*|^'"$DIR_CPP"'$|:'"$DIR_CPP"':|:'"$DIR_CPP"'$)' ; then
                        CCACHE_PATH="$DIR_CPP:$CCACHE_PATH"
                    fi
                    ;;
            esac
            CPP="/usr/lib/ccache/`basename "$CPP"`"
        else
            : # CPP="ccache $CPP"
        fi

        CONFIG_OPTS+=("CC=${CC}")
        CONFIG_OPTS+=("CXX=${CXX}")
        CONFIG_OPTS+=("CPP=${CPP}")
    fi

    # Clone and build dependencies
.   for use where defined (use.tarball)
    wget $(use.tarball)
    tar -xzf \$(basename "$(use.tarball)")
    cd \$(basename "$(use.tarball)" .tar.gz)
.       if defined (use.builddir)
    cd ./$(use.builddir)
.       endif
    CCACHE_BASEDIR=${PWD}
    export CCACHE_BASEDIR
    if [ -e autogen.sh ]; then
        ./autogen.sh 2> /dev/null
    fi
    if [ -e buildconf ]; then
        ./buildconf 2> /dev/null
    fi
    if [ ! -e autogen.sh ] && [ ! -e buildconf ] && [ ! -e ./configure ] && [ -s ./configure.ac ]; then
        libtoolize --copy --force && \\
        aclocal -I . && \\
        autoheader && \\
        automake --add-missing --copy && \\
        autoconf || \\
        autoreconf -fiv
    fi
    ./configure "${CONFIG_OPTS[@]}"
    make -j4
    make install
    cd ..
.   endfor
.   for use where defined (use.repository) & ! defined (use.tarball)
.      if defined (use.release)
    git clone --quiet --depth 1 -b $(use.release) $(use.repository) $(use.project).git
.      else
    git clone --quiet --depth 1 $(use.repository) $(use.project).git
.      endif
    BASE_PWD=${PWD}
.       if defined (use.builddir)
    cd $(use.project).git/$(use.builddir)
.       else
    cd $(use.project).git
.       endif
    CCACHE_BASEDIR=${PWD}
    export CCACHE_BASEDIR
    git --no-pager log --oneline -n1
    if [ -e autogen.sh ]; then
        ./autogen.sh 2> /dev/null
    fi
    if [ -e buildconf ]; then
        ./buildconf 2> /dev/null
    fi
    if [ ! -e autogen.sh ] && [ ! -e buildconf ] && [ ! -e ./configure ] && [ -s ./configure.ac ]; then
        libtoolize --copy --force && \\
        aclocal -I . && \\
        autoheader && \\
        automake --add-missing --copy && \\
        autoconf || \\
        autoreconf -fiv
    fi
    ./configure "${CONFIG_OPTS[@]}"
    make -j4
    make install
    cd "${BASE_PWD}"
.   endfor

    # Build and check this project; note that zprojects always have an autogen.sh
    CCACHE_BASEDIR=${PWD}
    export CCACHE_BASEDIR
    ./autogen.sh 2> /dev/null
    ./configure --enable-drafts=yes "${CONFIG_OPTS[@]}"
    make VERBOSE=1 all

    echo "=== Are GitIgnores good after 'make all' with drafts? (should have no output below)"
    git status -s || true
    echo "==="

.   if travis_distcheck ?= 0
    make check
.   else
    if [ "$BUILD_TYPE" == "default-Werror" ] ; then
        echo "NOTE: Skipping distcheck for BUILD_TYPE='$BUILD_TYPE'" >&2
    else
        export DISTCHECK_CONFIGURE_FLAGS="--enable-drafts=yes ${CONFIG_OPTS[@]}"
        make VERBOSE=1 DISTCHECK_CONFIGURE_FLAGS="$DISTCHECK_CONFIGURE_FLAGS" distcheck

        echo "=== Are GitIgnores good after 'make distcheck' with drafts? (should have no output below)"
        git status -s || true
        echo "==="
    fi

    # Build and check this project without DRAFT APIs
    make distclean
.   endif

    git clean -f
    git reset --hard HEAD
    (
        ./autogen.sh 2> /dev/null
        ./configure --enable-drafts=no "${CONFIG_OPTS[@]}" --with-docs=yes
        make VERBOSE=1 all || exit $?
.   if travis_distcheck ?= 0
        make check
.   else
        if [ "$BUILD_TYPE" == "default-Werror" ] ; then
            echo "NOTE: Skipping distcheck for BUILD_TYPE='$BUILD_TYPE'" >&2
        else
            export DISTCHECK_CONFIGURE_FLAGS="--enable-drafts=no ${CONFIG_OPTS[@]} --with-docs=yes" && \\
            make VERBOSE=1 DISTCHECK_CONFIGURE_FLAGS="$DISTCHECK_CONFIGURE_FLAGS" distcheck || exit $?
        fi
.   endif
    ) || exit 1

    echo "=== Are GitIgnores good after 'make distcheck' without drafts? (should have no output below)"
    git status -s || true
    echo "==="

    if [ "$HAVE_CCACHE" = yes ]; then
        echo "CCache stats after build:"
        ccache -s
    fi

elif [ "$BUILD_TYPE" == "bindings" ]; then
    pushd "./bindings/${BINDING}" && ./ci_build.sh
else
    pushd "./builds/${BUILD_TYPE}" && REPO_DIR="\$(dirs -l +1)" ./ci_build.sh
fi
.close
.chmod_x ("ci_build.sh")
.directory.create ("builds/check_zproject")
.output "builds/check_zproject/ci_build.sh"
#!/usr/bin/env bash
set -ex

cd $REPO_DIR/..
.for project.use where !optional & defined (use.repository)
git clone --quiet --depth 1 $(use.repository) $(use.project).git
.endfor
cd -

cd $REPO_DIR/..
git clone --quiet --depth 1 https://github.com/zeromq/zproject zproject.git
cd zproject.git
export PATH=$PATH:`pwd`

cd $REPO_DIR/..
git clone https://github.com/imatix/gsl.git gsl.git
cd gsl.git/src
make
export PATH=$PATH:`pwd`

# As we will overwrite this script file make sure bash loads the
# next lines into memory before executing
# http://stackoverflow.com/questions/21096478/overwrite-executing-bash-script-files
{
    cd $REPO_DIR
    gsl project.xml

    # keep an eye on git version used by CI
    git --version
    if [[ \$(git --no-pager diff -w) ]]; then
        git --no-pager diff -w
        echo "There are diffs between current code and code generated by zproject!"
        exit 1
    fi
    if [[ \$(git status -s) ]]; then
        git status -s
        echo "zproject generated new files!"
        exit 1
    fi
    exit 0
}
.close
.chmod_x ("builds/check_zproject/ci_build.sh")
.directory.create ("builds/check_zproto")
.output "builds/check_zproto/ci_build.sh"
#!/usr/bin/env bash
set -ex

.for model
docker run -e GSL_BUILD_DIR=/code/src -v "$REPO_DIR":/code zeromqorg/zproto -zproject:1 -q $(name).xml
.endfor

# keep an eye on git version used by CI
git --version
if [[ \$(git --no-pager diff -w api/*) ]]; then
    git --no-pager diff -w api/*
    echo "There are diffs between current code and code generated by zproto!"
    exit 1
fi
if [[ \$(git status -s api) ]]; then
    git status -s api
    echo "zproto generated new files!"
    exit 1
fi
.close
.chmod_x ("builds/check_zproto/ci_build.sh")
.
.output "ci_deploy.sh"
#!/usr/bin/env bash

$(project.GENERATED_WARNING_HEADER)

set -x
set -e

if [ "$BUILD_TYPE" == "default" ]; then
    # Tell travis to deploy all files in dist
    mkdir dist
    export $(PROJECT.NAME:c)_DEPLOYMENT=dist/*
    # Move archives to dist
    mv *.tar.gz dist
    mv *.zip dist
    # Generate hash sums
    cd dist
    md5sum *.zip *.tar.gz > MD5SUMS
    sha1sum *.zip *.tar.gz > SHA1SUMS
    cd -
elif [ "$BUILD_TYPE" == "bindings" ] && [ "$BINDING" == "jni" ]; then
    ( cd bindings/jni && TERM=dumb PKG_CONFIG_PATH=/tmp/lib/pkgconfig ./gradlew clean bintrayUpload )
    cp bindings/jni/android/$(project.name:c)-android.jar $(project.name:c)-android-$(->version.major).$(->version.minor).$(->version.patch).jar
    export $(PROJECT.NAME:c)_DEPLOYMENT=$(project.name:c)-android-$(->version.major).$(->version.minor).$(->version.patch).jar
else
    export $(PROJECT.NAME:c)_DEPLOYMENT=""
fi
.close
.chmod_x ("ci_deploy.sh")
.
.directory.create ("builds/valgrind")
.output "builds/valgrind/ci_build.sh"
#!/usr/bin/env bash

$(project.GENERATED_WARNING_HEADER)

set -x

cd ../..

mkdir tmp
BUILD_PREFIX=$PWD/tmp

CONFIG_OPTS=()
CONFIG_OPTS+=("CFLAGS=-I${BUILD_PREFIX}/include")
CONFIG_OPTS+=("CPPFLAGS=-I${BUILD_PREFIX}/include")
CONFIG_OPTS+=("CXXFLAGS=-I${BUILD_PREFIX}/include")
CONFIG_OPTS+=("LDFLAGS=-L${BUILD_PREFIX}/lib")
CONFIG_OPTS+=("PKG_CONFIG_PATH=${BUILD_PREFIX}/lib/pkgconfig")
CONFIG_OPTS+=("--prefix=${BUILD_PREFIX}")
CONFIG_OPTS+=("--with-docs=no")
CONFIG_OPTS+=("--quiet")

# Clone and build dependencies
.for use where defined (use.tarball)
wget $(use.tarball)
tar -xzf \$(basename "$(use.tarball)")
cd \$(basename "$(use.tarball)" .tar.gz)
\./configure "${CONFIG_OPTS[@]}"
make -j4
make install
cd ..
.endfor
.for use where defined (use.repository)
. if defined (use.release)
git clone --quiet --depth 1 -b $(use.release) $(use.repository) $(use.project).git
. else
git clone --quiet --depth 1 $(use.repository) $(use.project).git
. endif
BASE_PWD=${PWD}
. if defined (use.builddir)
cd $(use.project).git/$(use.builddir)
. else
cd $(use.project).git
. endif
git --no-pager log --oneline -n1
if [ -e autogen.sh ]; then
    ./autogen.sh 2> /dev/null
fi
if [ -e buildconf ]; then
    ./buildconf 2> /dev/null
fi
\./configure "${CONFIG_OPTS[@]}"
make -j4
make install
cd "${BASE_PWD}"
.endfor

# Build and check this project
\./autogen.sh 2> /dev/null
\./configure --enable-drafts=yes "${CONFIG_OPTS[@]}"
make VERBOSE=1 memcheck || exit 1
.close
.chmod_x ("builds/valgrind/ci_build.sh")
.endmacro
